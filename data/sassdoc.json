[
  {
    "description": "Clear floated content within a container using a pseudo element\n\n",
    "commentRange": {
      "start": 5,
      "end": 7
    },
    "context": {
      "type": "mixin",
      "name": "govuk-clearfix",
      "code": "\n  &:after {\n    content: \"\";\n    display: block;\n    clear: both;\n  }\n",
      "line": {
        "start": 9,
        "end": 15
      }
    },
    "access": "public",
    "group": [
      "helpers"
    ],
    "file": {
      "path": "helpers/_clearfix.scss",
      "name": "_clearfix.scss"
    }
  },
  {
    "description": "Media query for retina images (device-pixel-ratio)\n\n",
    "commentRange": {
      "start": 5,
      "end": 28
    },
    "context": {
      "type": "mixin",
      "name": "govuk-device-pixel-ratio",
      "code": "\n  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\n    only screen and (     min-device-pixel-ratio: $ratio),\n    only screen and (             min-resolution: #{($ratio*96)}dpi),\n    only screen and (             min-resolution: #{$ratio}dppx) {\n      @content;\n    }\n",
      "line": {
        "start": 30,
        "end": 37
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "ratio",
        "default": "2",
        "description": "Device pixel ratio"
      }
    ],
    "content": "Passed content will be outputted within the media query",
    "example": [
      {
        "type": "scss",
        "code": "background-image: govuk-image-url(\"my-image.png\");\n\n@include govuk-device-pixel-ratio {\n  background-image: govuk-image-url(\"my-image-2x.png\");\n}",
        "description": "Providing a @2x image for screens that support it"
      },
      {
        "type": "scss",
        "code": "background-image: govuk-image-url(\"my-image.png\");\n\n@include govuk-device-pixel-ratio {\n  background-image: govuk-image-url(\"my-image-2x.png\");\n}\n\n@include govuk-device-pixel-ratio(3) {\n  background-image: govuk-image-url(\"my-image-3x.png\");\n}",
        "description": "Using a custom ratio"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [],
    "file": {
      "path": "helpers/_device-pixels.scss",
      "name": "_device-pixels.scss"
    }
  },
  {
    "description": "Focused text\n\nProvides an outline to clearly indicate when the target element is focused.\nUsed for interactive text-based elements.\n\n",
    "commentRange": {
      "start": 5,
      "end": 10
    },
    "context": {
      "type": "mixin",
      "name": "govuk-focused-text",
      "code": "\n  // When colours are overridden, for example when users have a dark mode,\n  // backgrounds and box-shadows disappear, so we need to ensure there's a\n  // transparent outline which will be set to a visible colour.\n\n  // Since Internet Explorer 8 does not support box-shadow, we want to force the\n  // user-agent outlines\n  @include govuk-not-ie8 {\n    outline: $govuk-focus-width solid transparent;\n  }\n  color: $govuk-focus-text-colour;\n  background-color: $govuk-focus-colour;\n  box-shadow: 0 -2px $govuk-focus-colour, 0 4px $govuk-focus-text-colour;\n  // When link is focussed, hide the default underline since the\n  // box shadow adds the \"underline\"\n  text-decoration: none;\n",
      "line": {
        "start": 12,
        "end": 28
      }
    },
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-focus-width"
      },
      {
        "type": "variable",
        "name": "govuk-focus-text-colour"
      },
      {
        "type": "variable",
        "name": "govuk-focus-colour"
      },
      {
        "type": "variable",
        "name": "govuk-focus-colour"
      },
      {
        "type": "variable",
        "name": "govuk-focus-text-colour"
      }
    ],
    "file": {
      "path": "helpers/_focused.scss",
      "name": "_focused.scss"
    },
    "usedBy": [
      {
        "description": "Common link mixin\n\nProvides the typography and focus state, regardless of link style.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-common",
          "code": "\n  @include govuk-typography-common;\n\n  &:focus {\n    @include govuk-focused-text;\n  }\n",
          "line": {
            "start": 11,
            "end": 17
          }
        }
      }
    ]
  },
  {
    "description": "Font Face - GDS Transport\n\nOutputs the font-face declaration for GDS Transport at the root of the CSS document\nthe first time it is called.\n\n",
    "commentRange": {
      "start": 10,
      "end": 15
    },
    "context": {
      "type": "mixin",
      "name": "_govuk-font-face-gds-transport",
      "code": "\n  @include govuk-not-ie8 { // In IE8, which cannot render WOFF format, we fall back to system fonts\n    @include govuk-exports(\"govuk/helpers/font-faces\") {\n      @at-root {\n        /*! Copyright (c) 2011 by Margaret Calvert & Henrik Kubel. All rights reserved. The font has been customised for exclusive use on gov.uk. This cut is not commercially available. */\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"light-94a07e06a1-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"light-f591b13f7d-v2.woff\") format(\"woff\");\n          font-weight: normal;\n          font-style: normal;\n          font-display: fallback;\n        }\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"bold-b542beb274-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"bold-affa96571d-v2.woff\") format(\"woff\");\n          font-weight: bold;\n          font-style: normal;\n          font-display: fallback;\n        }\n      }\n    }\n  }\n",
      "line": {
        "start": 17,
        "end": 43
      }
    },
    "access": "private",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "function",
        "name": "govuk-font-url"
      },
      {
        "type": "function",
        "name": "govuk-font-url"
      },
      {
        "type": "function",
        "name": "govuk-font-url"
      },
      {
        "type": "function",
        "name": "govuk-font-url"
      }
    ],
    "file": {
      "path": "helpers/_font-faces.scss",
      "name": "_font-faces.scss"
    },
    "usedBy": [
      {
        "description": "'Common typography' helper\n\nSets the font family and associated properties, such as font smoothing. Also\noverrides the font for print.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-common",
          "code": "\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If the user is using the default GDS Transport font we need to include\n  // the font-face declarations.\n  //\n  // We do not need to include the GDS Transport font-face declarations if\n  // alphagov/govuk_template is being used since nta will already be included by\n  // default.\n  @if ($govuk-include-default-font-face) {\n    @include _govuk-font-face-gds-transport;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n",
          "line": {
            "start": 15,
            "end": 33
          }
        }
      }
    ]
  },
  {
    "description": "Grid width percentage\n\n",
    "commentRange": {
      "start": 5,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "govuk-grid-width",
      "code": "\n  @if map-has-key($govuk-grid-widths, $key) {\n    @return map-get($govuk-grid-widths, $key);\n  }\n\n  @error \"Unknown grid width `#{$key}`\";\n",
      "line": {
        "start": 12,
        "end": 18
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "key",
        "description": "Name of grid width (e.g. two-thirds)"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Percentage width"
    },
    "throw": [
      "Unknown grid width `#{$key}`"
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-grid-widths"
      },
      {
        "type": "variable",
        "name": "govuk-grid-widths"
      }
    ],
    "file": {
      "path": "helpers/_grid.scss",
      "name": "_grid.scss"
    },
    "usedBy": [
      {
        "description": "Generate grid column styles\n\nCreates a grid column with standard gutter between the columns.\n\nGrid widths are defined in the `$govuk-grid-widths` map.\n\nBy default the column width changes from 100% to specified width at the\n'tablet' breakpoint, but other breakpoints can be specified using the `$at`\nparameter.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-grid-column",
          "code": "\n  box-sizing: border-box;\n  @if $at != desktop {\n    width: 100%;\n  }\n  padding: 0 $govuk-gutter-half;\n  @include govuk-media-query($from: $at) {\n    width: govuk-grid-width($width);\n    float: $float;\n  }\n",
          "line": {
            "start": 50,
            "end": 60
          }
        }
      }
    ]
  },
  {
    "description": "Generate grid column styles\n\nCreates a grid column with standard gutter between the columns.\n\nGrid widths are defined in the `$govuk-grid-widths` map.\n\nBy default the column width changes from 100% to specified width at the\n'tablet' breakpoint, but other breakpoints can be specified using the `$at`\nparameter.\n\n",
    "commentRange": {
      "start": 20,
      "end": 48
    },
    "context": {
      "type": "mixin",
      "name": "govuk-grid-column",
      "code": "\n  box-sizing: border-box;\n  @if $at != desktop {\n    width: 100%;\n  }\n  padding: 0 $govuk-gutter-half;\n  @include govuk-media-query($from: $at) {\n    width: govuk-grid-width($width);\n    float: $float;\n  }\n",
      "line": {
        "start": 50,
        "end": 60
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "width",
        "default": "full",
        "description": "name of a grid width from $govuk-grid-widths"
      },
      {
        "type": "String",
        "name": "float",
        "default": "left",
        "description": "left | right"
      },
      {
        "type": "String",
        "name": "at",
        "default": "tablet",
        "description": "mobile | tablet | desktop | any custom breakpoint\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".govuk-grid-column-two-thirds {\n  @include govuk-grid-column(two-thirds)\n}",
        "description": "Default"
      },
      {
        "type": "scss",
        "code": ".govuk-grid-column-one-half-at-desktop {\n  @include govuk-grid-column(one-half, $at: desktop);\n}",
        "description": "Customising the breakpoint where width percentage is applied"
      },
      {
        "type": "scss",
        "code": ".govuk-grid-column-one-half-right {\n  @include govuk-grid-column(two-thirds, $float: right);",
        "description": "Customising the float direction"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "function",
        "name": "govuk-grid-width"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      }
    ],
    "file": {
      "path": "helpers/_grid.scss",
      "name": "_grid.scss"
    }
  },
  {
    "description": "Common link mixin\n\nProvides the typography and focus state, regardless of link style.\n\n",
    "commentRange": {
      "start": 5,
      "end": 9
    },
    "context": {
      "type": "mixin",
      "name": "govuk-link-common",
      "code": "\n  @include govuk-typography-common;\n\n  &:focus {\n    @include govuk-focused-text;\n  }\n",
      "line": {
        "start": 11,
        "end": 17
      }
    },
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-typography-common"
      },
      {
        "type": "mixin",
        "name": "govuk-focused-text"
      }
    ],
    "file": {
      "path": "helpers/_links.scss",
      "name": "_links.scss"
    }
  },
  {
    "description": "Default link style mixin\n\nProvides the default unvisited, visited, hover and active states for links.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
    "commentRange": {
      "start": 19,
      "end": 32
    },
    "context": {
      "type": "mixin",
      "name": "govuk-link-style-default",
      "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-visited-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector\n  // designed to make unvisited link  s a slightly darker blue when focussed, so\n  // we need to override the text colour for that combination of selectors so\n  // so that unvisited links styled as buttons do not end up with dark blue\n  // text when focussed.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      color: $govuk-focus-text-colour;\n    }\n  }\n",
      "line": {
        "start": 34,
        "end": 67
      }
    },
    "example": [
      {
        "type": "scss",
        "code": ".govuk-component__link {\n  @include govuk-link-common;\n  @include govuk-link-style-default;\n}"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-compatibility"
      },
      {
        "type": "variable",
        "name": "govuk-link-colour"
      },
      {
        "type": "variable",
        "name": "govuk-link-visited-colour"
      },
      {
        "type": "variable",
        "name": "govuk-link-hover-colour"
      },
      {
        "type": "variable",
        "name": "govuk-link-active-colour"
      },
      {
        "type": "variable",
        "name": "govuk-focus-text-colour"
      },
      {
        "type": "variable",
        "name": "govuk-focus-text-colour"
      }
    ],
    "file": {
      "path": "helpers/_links.scss",
      "name": "_links.scss"
    }
  },
  {
    "description": "Muted style link mixin\n\nUsed for secondary links on a page - the link will appear in muted colours\nregardless of visited state.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
    "commentRange": {
      "start": 69,
      "end": 83
    },
    "context": {
      "type": "mixin",
      "name": "govuk-link-style-muted",
      "code": "\n  &:link,\n  &:visited,\n  &:hover,\n  &:active {\n    color: $govuk-secondary-text-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
      "line": {
        "start": 85,
        "end": 107
      }
    },
    "example": [
      {
        "type": "scss",
        "code": ".govuk-component__link {\n  @include govuk-link-common;\n  @include govuk-link-style-muted;\n}"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-compatibility"
      },
      {
        "type": "mixin",
        "name": "govuk-text-colour"
      },
      {
        "type": "variable",
        "name": "govuk-secondary-text-colour"
      },
      {
        "type": "variable",
        "name": "govuk-focus-text-colour"
      }
    ],
    "file": {
      "path": "helpers/_links.scss",
      "name": "_links.scss"
    }
  },
  {
    "description": "Text style link mixin\n\nOverrides the colour of links to match the text colour. Generally used by\nnavigation components, such as breadcrumbs or the back link.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
    "commentRange": {
      "start": 109,
      "end": 123
    },
    "context": {
      "type": "mixin",
      "name": "govuk-link-style-text",
      "code": "\n  // Override link colour to use text colour\n  &:link,\n  &:visited,\n  &:hover,\n  &:active,\n  &:focus {\n    @include govuk-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
      "line": {
        "start": 125,
        "end": 143
      }
    },
    "example": [
      {
        "type": "scss",
        "code": ".govuk-component__link {\n  @include govuk-link-common;\n  @include govuk-link-style-text;\n}"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-text-colour"
      },
      {
        "type": "mixin",
        "name": "govuk-compatibility"
      },
      {
        "type": "mixin",
        "name": "govuk-text-colour"
      }
    ],
    "file": {
      "path": "helpers/_links.scss",
      "name": "_links.scss"
    }
  },
  {
    "description": "No visited state link mixin\n\nUsed in cases where it is not helpful to distinguish between visited and\nnon-visited links.\n\nFor example, navigation links to pages with dynamic content like admin\ndashboards. The content on the page is changing all the time, so the fact\nthat you’ve visited it before is not important.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
    "commentRange": {
      "start": 146,
      "end": 164
    },
    "context": {
      "type": "mixin",
      "name": "govuk-link-style-no-visited-state",
      "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n",
      "line": {
        "start": 166,
        "end": 188
      }
    },
    "example": [
      {
        "type": "scss",
        "code": ".govuk-component__link {\n  @include govuk-link-common;\n  @include govuk-link-style-no-visited-state;\n}"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-link-colour"
      },
      {
        "type": "variable",
        "name": "govuk-link-colour"
      },
      {
        "type": "variable",
        "name": "govuk-link-hover-colour"
      },
      {
        "type": "variable",
        "name": "govuk-link-active-colour"
      },
      {
        "type": "variable",
        "name": "govuk-focus-text-colour"
      }
    ],
    "file": {
      "path": "helpers/_links.scss",
      "name": "_links.scss"
    }
  },
  {
    "description": "Print friendly link mixin\n\nWhen printing, append the the destination URL to the link text, as long\nas the URL starts with either `/`, `http://` or `https://`.\n\n",
    "commentRange": {
      "start": 190,
      "end": 195
    },
    "context": {
      "type": "mixin",
      "name": "govuk-link-print-friendly",
      "code": "\n  @include govuk-media-query($media-type: print) {\n\n    &[href^=\"/\"],\n    &[href^=\"http://\"],\n    &[href^=\"https://\"] {\n      &::after {\n        content: \" (\" attr(href) \")\";\n        font-size: 90%;\n\n        // Because the URLs may be very long, ensure that they may be broken\n        // at arbitrary points if there are no otherwise acceptable break\n        // points in the line\n        word-wrap: break-word;\n      }\n    }\n  }\n",
      "line": {
        "start": 197,
        "end": 214
      }
    },
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-media-query"
      }
    ],
    "file": {
      "path": "helpers/_links.scss",
      "name": "_links.scss"
    }
  },
  {
    "description": "Media Query\n\nThis is a currently a wrapper for sass-mq - abstracted so that we can\nreplace it in the future if we so choose.\n\n",
    "commentRange": {
      "start": 50,
      "end": 89
    },
    "context": {
      "type": "mixin",
      "name": "govuk-media-query",
      "code": "\n  @include mq($args...) {\n    @content;\n  };\n",
      "line": {
        "start": 91,
        "end": 95
      }
    },
    "parameter": [
      {
        "type": "String | Boolean",
        "name": "from",
        "default": "false",
        "description": "One of $govuk-breakpoints"
      },
      {
        "type": "String | Boolean",
        "name": "until",
        "default": "false",
        "description": "One of $govuk-breakpoints"
      },
      {
        "type": "String | Boolean",
        "name": "and",
        "default": "false",
        "description": "Additional media query parameters"
      },
      {
        "type": "String",
        "name": "media-type",
        "default": "all",
        "description": "Media type: screen, print…\n"
      }
    ],
    "ignore": [],
    "content": "styling rules, wrapped into a @media query when $responsive is true",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include govuk-media-query($from: mobile) {\n    color: red;\n  }\n  @include govuk-media-query($until: tablet) {\n    color: blue;\n  }\n  @include govuk-media-query(mobile, tablet) {\n    color: green;\n  }\n  @include govuk-media-query($from: tablet, $and: '(orientation: landscape)') {\n    color: teal;\n  }\n  @include govuk-media-query(950px) {\n    color: hotpink;\n  }\n  @include govuk-media-query(tablet, $media-type: screen) {\n    color: hotpink;\n  }\n}"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "mq"
      }
    ],
    "file": {
      "path": "helpers/_media-queries.scss",
      "name": "_media-queries.scss"
    },
    "usedBy": [
      {
        "description": "Generate grid column styles\n\nCreates a grid column with standard gutter between the columns.\n\nGrid widths are defined in the `$govuk-grid-widths` map.\n\nBy default the column width changes from 100% to specified width at the\n'tablet' breakpoint, but other breakpoints can be specified using the `$at`\nparameter.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-grid-column",
          "code": "\n  box-sizing: border-box;\n  @if $at != desktop {\n    width: 100%;\n  }\n  padding: 0 $govuk-gutter-half;\n  @include govuk-media-query($from: $at) {\n    width: govuk-grid-width($width);\n    float: $float;\n  }\n",
          "line": {
            "start": 50,
            "end": 60
          }
        }
      },
      {
        "description": "Print friendly link mixin\n\nWhen printing, append the the destination URL to the link text, as long\nas the URL starts with either `/`, `http://` or `https://`.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-print-friendly",
          "code": "\n  @include govuk-media-query($media-type: print) {\n\n    &[href^=\"/\"],\n    &[href^=\"http://\"],\n    &[href^=\"https://\"] {\n      &::after {\n        content: \" (\" attr(href) \")\";\n        font-size: 90%;\n\n        // Because the URLs may be very long, ensure that they may be broken\n        // at arbitrary points if there are no otherwise acceptable break\n        // points in the line\n        word-wrap: break-word;\n      }\n    }\n  }\n",
          "line": {
            "start": 197,
            "end": 214
          }
        }
      },
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      },
      {
        "description": "'Common typography' helper\n\nSets the font family and associated properties, such as font smoothing. Also\noverrides the font for print.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-common",
          "code": "\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If the user is using the default GDS Transport font we need to include\n  // the font-face declarations.\n  //\n  // We do not need to include the GDS Transport font-face declarations if\n  // alphagov/govuk_template is being used since nta will already be included by\n  // default.\n  @if ($govuk-include-default-font-face) {\n    @include _govuk-font-face-gds-transport;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n",
          "line": {
            "start": 15,
            "end": 33
          }
        }
      },
      {
        "description": "Text colour helper\n\nSets the text colour, including a suitable override for print.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-text-colour",
          "code": "\n  color: $govuk-text-colour;\n\n  @include govuk-media-query($media-type: print) {\n    color: $govuk-print-text-colour;\n  }\n",
          "line": {
            "start": 41,
            "end": 47
          }
        }
      },
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      },
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "",
        "context": {
          "type": "mixin",
          "name": "govuk-main-wrapper",
          "code": "\n  // In IE11 the `main` element can be used, but is not recognized  –\n  // meaning it's not defined in IE's default style sheet,\n  // so it uses CSS initial value, which is inline.\n  display: block;\n  padding-top: govuk-spacing(4);\n  padding-bottom: govuk-spacing(4);\n\n  @include govuk-media-query($from: tablet) {\n    // This spacing is manually adjusted to replicate the margin of\n    // govuk-heading-xl (50px) minus the spacing of back link and\n    // breadcrumbs (10px)\n    padding-top: govuk-spacing(7);\n    padding-bottom: govuk-spacing(7);\n  }\n",
          "line": {
            "start": 25,
            "end": 40
          }
        }
      }
    ]
  },
  {
    "description": "Calculate the height of an equilateral triangle\n\nMultiplying half the length of the base of an equilateral triangle by the\nsquare root of three gives us its height. We use 1.732 as an approximation.\n\n",
    "commentRange": {
      "start": 5,
      "end": 12
    },
    "context": {
      "type": "function",
      "name": "_govuk-equilateral-height",
      "code": "\n  $square-root-of-three: 1.732;\n\n  @return ($base / 2) * $square-root-of-three;\n",
      "line": {
        "start": 14,
        "end": 18
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "base",
        "description": "Length of the base of the triangle"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Calculated height of the triangle"
    },
    "access": "private",
    "group": [
      "helpers"
    ],
    "require": [],
    "file": {
      "path": "helpers/_shape-arrow.scss",
      "name": "_shape-arrow.scss"
    },
    "usedBy": [
      {
        "description": "Arrow mixin\n\nGenerate Arrows (triangles) by using a mix of transparent (1) and coloured\nborders. The coloured borders inherit the text colour of the element (2).\n\nEnsure the arrow is rendered correctly if browser colours are overridden by\nproviding a clip path (3). Without this the transparent borders are\noverridden to become visible which results in a square.\n\nWe need both because older browsers do not support clip-path.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-shape-arrow",
          "code": "\n  display: $display;\n\n  width: 0;\n  height: 0;\n\n  border-style: solid;\n  border-color: transparent; // 1\n\n  $perpendicular: $base / 2;\n\n  @if ($height == null) {\n    $height: _govuk-equilateral-height($base);\n  }\n\n  @if $direction == \"up\" {\n    -webkit-clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n            clip-path: polygon(50% 0%, 0% 100%, 100% 100%); // 3\n\n    border-width: 0 $perpendicular $height $perpendicular;\n    border-bottom-color: inherit; // 2\n  } @else if $direction == \"right\" {\n    -webkit-clip-path: polygon(0% 0%, 100% 50%, 0% 100%);\n            clip-path: polygon(0% 0%, 100% 50%, 0% 100%); // 3\n\n    border-width: $perpendicular 0 $perpendicular $height;\n    border-left-color: inherit; // 2\n  } @else if $direction == \"down\" {\n    -webkit-clip-path: polygon(0% 0%, 50% 100%, 100% 0%);\n            clip-path: polygon(0% 0%, 50% 100%, 100% 0%); // 3\n\n    border-width: $height $perpendicular 0 $perpendicular;\n    border-top-color: inherit; // 2\n  } @else if $direction == \"left\" {\n    -webkit-clip-path: polygon(0% 50%, 100% 100%, 100% 0%);\n            clip-path: polygon(0% 50%, 100% 100%, 100% 0%); // 3\n\n    border-width: $perpendicular $height $perpendicular 0;\n    border-right-color: inherit; // 2\n  } @else {\n    @error \"Invalid arrow direction: expected `up`, `right`, `down` or `left`, got `#{$direction}`\";\n  }\n",
          "line": {
            "start": 38,
            "end": 80
          }
        }
      }
    ]
  },
  {
    "description": "Arrow mixin\n\nGenerate Arrows (triangles) by using a mix of transparent (1) and coloured\nborders. The coloured borders inherit the text colour of the element (2).\n\nEnsure the arrow is rendered correctly if browser colours are overridden by\nproviding a clip path (3). Without this the transparent borders are\noverridden to become visible which results in a square.\n\nWe need both because older browsers do not support clip-path.\n\n",
    "commentRange": {
      "start": 20,
      "end": 36
    },
    "context": {
      "type": "mixin",
      "name": "govuk-shape-arrow",
      "code": "\n  display: $display;\n\n  width: 0;\n  height: 0;\n\n  border-style: solid;\n  border-color: transparent; // 1\n\n  $perpendicular: $base / 2;\n\n  @if ($height == null) {\n    $height: _govuk-equilateral-height($base);\n  }\n\n  @if $direction == \"up\" {\n    -webkit-clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n            clip-path: polygon(50% 0%, 0% 100%, 100% 100%); // 3\n\n    border-width: 0 $perpendicular $height $perpendicular;\n    border-bottom-color: inherit; // 2\n  } @else if $direction == \"right\" {\n    -webkit-clip-path: polygon(0% 0%, 100% 50%, 0% 100%);\n            clip-path: polygon(0% 0%, 100% 50%, 0% 100%); // 3\n\n    border-width: $perpendicular 0 $perpendicular $height;\n    border-left-color: inherit; // 2\n  } @else if $direction == \"down\" {\n    -webkit-clip-path: polygon(0% 0%, 50% 100%, 100% 0%);\n            clip-path: polygon(0% 0%, 50% 100%, 100% 0%); // 3\n\n    border-width: $height $perpendicular 0 $perpendicular;\n    border-top-color: inherit; // 2\n  } @else if $direction == \"left\" {\n    -webkit-clip-path: polygon(0% 50%, 100% 100%, 100% 0%);\n            clip-path: polygon(0% 50%, 100% 100%, 100% 0%); // 3\n\n    border-width: $perpendicular $height $perpendicular 0;\n    border-right-color: inherit; // 2\n  } @else {\n    @error \"Invalid arrow direction: expected `up`, `right`, `down` or `left`, got `#{$direction}`\";\n  }\n",
      "line": {
        "start": 38,
        "end": 80
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "direction",
        "description": "Direction for arrow: up, right, down, left."
      },
      {
        "type": "Number",
        "name": "base",
        "description": "Length of the triangle 'base' side"
      },
      {
        "type": "Number",
        "name": "height",
        "default": "null",
        "description": "Height of triangle. Omit for equilateral."
      },
      {
        "type": "String",
        "name": "display",
        "default": "block",
        "description": "CSS display property of the arrow\n"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "function",
        "name": "_govuk-equilateral-height"
      }
    ],
    "throw": [
      "Invalid arrow direction: expected `up`, `right`, `down` or `left`, got `#{$direction}`"
    ],
    "file": {
      "path": "helpers/_shape-arrow.scss",
      "name": "_shape-arrow.scss"
    }
  },
  {
    "description": "Single point spacing\n\nReturns measurement corresponding to the spacing point requested.\n\n",
    "commentRange": {
      "start": 5,
      "end": 18
    },
    "context": {
      "type": "function",
      "name": "govuk-spacing",
      "code": "\n\n  $actual-input-type: type-of($spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-points, $spacing-point) {\n    @error \"Unknown spacing variable `#{$spacing-point}`. Make sure you are using a point from the spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  @return map-get($govuk-spacing-points, $spacing-point);\n",
      "line": {
        "start": 20,
        "end": 33
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "spacing-point",
        "description": "Point on the spacing scale (set in `settings/_spacing.sccs`)\n"
      }
    ],
    "return": {
      "type": "String",
      "description": "Spacing Measurement eg. 10px\n"
    },
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  padding: govuk-spacing(5);\n  top: govuk-spacing(2) !important; // if `!important` is required\n}"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-spacing-points"
      },
      {
        "type": "variable",
        "name": "govuk-spacing-points"
      }
    ],
    "throw": [
      "Expected a number (integer), but got a ",
      "Unknown spacing variable `#{$spacing-point}`. Make sure you are using a point from the spacing scale in `_settings/spacing.scss`."
    ],
    "file": {
      "path": "helpers/_spacing.scss",
      "name": "_spacing.scss"
    },
    "usedBy": [
      {
        "description": "",
        "context": {
          "type": "mixin",
          "name": "govuk-main-wrapper",
          "code": "\n  // In IE11 the `main` element can be used, but is not recognized  –\n  // meaning it's not defined in IE's default style sheet,\n  // so it uses CSS initial value, which is inline.\n  display: block;\n  padding-top: govuk-spacing(4);\n  padding-bottom: govuk-spacing(4);\n\n  @include govuk-media-query($from: tablet) {\n    // This spacing is manually adjusted to replicate the margin of\n    // govuk-heading-xl (50px) minus the spacing of back link and\n    // breadcrumbs (10px)\n    padding-top: govuk-spacing(7);\n    padding-bottom: govuk-spacing(7);\n  }\n",
          "line": {
            "start": 25,
            "end": 40
          }
        }
      },
      {
        "description": "",
        "context": {
          "type": "mixin",
          "name": "govuk-main-wrapper",
          "code": "\n  // In IE11 the `main` element can be used, but is not recognized  –\n  // meaning it's not defined in IE's default style sheet,\n  // so it uses CSS initial value, which is inline.\n  display: block;\n  padding-top: govuk-spacing(4);\n  padding-bottom: govuk-spacing(4);\n\n  @include govuk-media-query($from: tablet) {\n    // This spacing is manually adjusted to replicate the margin of\n    // govuk-heading-xl (50px) minus the spacing of back link and\n    // breadcrumbs (10px)\n    padding-top: govuk-spacing(7);\n    padding-bottom: govuk-spacing(7);\n  }\n",
          "line": {
            "start": 25,
            "end": 40
          }
        }
      },
      {
        "description": "",
        "context": {
          "type": "mixin",
          "name": "govuk-main-wrapper",
          "code": "\n  // In IE11 the `main` element can be used, but is not recognized  –\n  // meaning it's not defined in IE's default style sheet,\n  // so it uses CSS initial value, which is inline.\n  display: block;\n  padding-top: govuk-spacing(4);\n  padding-bottom: govuk-spacing(4);\n\n  @include govuk-media-query($from: tablet) {\n    // This spacing is manually adjusted to replicate the margin of\n    // govuk-heading-xl (50px) minus the spacing of back link and\n    // breadcrumbs (10px)\n    padding-top: govuk-spacing(7);\n    padding-bottom: govuk-spacing(7);\n  }\n",
          "line": {
            "start": 25,
            "end": 40
          }
        }
      },
      {
        "description": "",
        "context": {
          "type": "mixin",
          "name": "govuk-main-wrapper",
          "code": "\n  // In IE11 the `main` element can be used, but is not recognized  –\n  // meaning it's not defined in IE's default style sheet,\n  // so it uses CSS initial value, which is inline.\n  display: block;\n  padding-top: govuk-spacing(4);\n  padding-bottom: govuk-spacing(4);\n\n  @include govuk-media-query($from: tablet) {\n    // This spacing is manually adjusted to replicate the margin of\n    // govuk-heading-xl (50px) minus the spacing of back link and\n    // breadcrumbs (10px)\n    padding-top: govuk-spacing(7);\n    padding-bottom: govuk-spacing(7);\n  }\n",
          "line": {
            "start": 25,
            "end": 40
          }
        }
      }
    ]
  },
  {
    "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
    "commentRange": {
      "start": 35,
      "end": 52
    },
    "context": {
      "type": "mixin",
      "name": "_govuk-responsive-spacing",
      "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
      "line": {
        "start": 54,
        "end": 99
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "responsive-spacing-point",
        "description": "Point on the responsive spacing\n  scale, corresponds to a map of breakpoints and spacing values"
      },
      {
        "type": "String",
        "name": "property",
        "description": "Property to add spacing to (e.g. 'margin')"
      },
      {
        "type": "String",
        "name": "direction",
        "default": "all",
        "description": "Direction to add spacing to\n  (`top`, `right`, `bottom`, `left`, `all`)"
      },
      {
        "type": "Boolean",
        "name": "important",
        "default": "false",
        "description": "Whether to mark as `!important`"
      },
      {
        "type": "Number",
        "name": "adjustment",
        "default": "false",
        "description": "Offset to adjust spacing by\n"
      }
    ],
    "access": "private",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "variable",
        "name": "govuk-spacing-responsive-scale"
      },
      {
        "type": "variable",
        "name": "govuk-spacing-responsive-scale"
      }
    ],
    "throw": [
      "Expected a number (integer), but got a ",
      "Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the "
    ],
    "file": {
      "path": "helpers/_spacing.scss",
      "name": "_spacing.scss"
    },
    "usedBy": [
      {
        "description": "Responsive margin\n\nAdds responsive margin by fetching a 'spacing map' from the responsive\nspacing scale, which defines different spacing values at different\nbreakpoints. Wrapper for the `_govuk-responsive-spacing` mixin.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-responsive-margin",
          "code": "\n  @include _govuk-responsive-spacing($responsive-spacing-point, \"margin\", $direction, $important, $adjustment);\n",
          "line": {
            "start": 123,
            "end": 125
          }
        }
      },
      {
        "description": "Responsive padding\n\nAdds responsive padding by fetching a 'spacing map' from the responsive\nspacing scale, which defines different spacing values at different\nbreakpoints. Wrapper for the `_govuk-responsive-spacing` mixin.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-responsive-padding",
          "code": "\n  @include _govuk-responsive-spacing($responsive-spacing-point, \"padding\", $direction, $important, $adjustment);\n",
          "line": {
            "start": 149,
            "end": 152
          }
        }
      },
      {
        "description": "Spacing override classes\n\nGenerate spacing override classes for the given property (e.g. margin)\nfor each point in the spacing scale.\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-generate-spacing-overrides",
          "code": "\n  // For each point in the spacing scale (defined in settings), create an\n  // override that affects all directions...\n  @each $scale-point, $scale-map in $govuk-spacing-responsive-scale {\n\n    .govuk-\\!-#{$property}-#{$scale-point} {\n\n      @include _govuk-responsive-spacing($scale-point, $property, \"all\", true);\n    }\n\n    // ... and then an override for each individual direction\n    @each $direction in $_spacing-directions {\n\n      .govuk-\\!-#{$property}-#{$direction}-#{$scale-point} {\n        @include _govuk-responsive-spacing($scale-point, $property, $direction, true);\n      }\n    }\n  }\n",
          "line": {
            "start": 39,
            "end": 57
          }
        }
      },
      {
        "description": "Spacing override classes\n\nGenerate spacing override classes for the given property (e.g. margin)\nfor each point in the spacing scale.\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-generate-spacing-overrides",
          "code": "\n  // For each point in the spacing scale (defined in settings), create an\n  // override that affects all directions...\n  @each $scale-point, $scale-map in $govuk-spacing-responsive-scale {\n\n    .govuk-\\!-#{$property}-#{$scale-point} {\n\n      @include _govuk-responsive-spacing($scale-point, $property, \"all\", true);\n    }\n\n    // ... and then an override for each individual direction\n    @each $direction in $_spacing-directions {\n\n      .govuk-\\!-#{$property}-#{$direction}-#{$scale-point} {\n        @include _govuk-responsive-spacing($scale-point, $property, $direction, true);\n      }\n    }\n  }\n",
          "line": {
            "start": 39,
            "end": 57
          }
        }
      }
    ]
  },
  {
    "description": "Responsive margin\n\nAdds responsive margin by fetching a 'spacing map' from the responsive\nspacing scale, which defines different spacing values at different\nbreakpoints. Wrapper for the `_govuk-responsive-spacing` mixin.\n\n",
    "commentRange": {
      "start": 101,
      "end": 121
    },
    "context": {
      "type": "mixin",
      "name": "govuk-responsive-margin",
      "code": "\n  @include _govuk-responsive-spacing($responsive-spacing-point, \"margin\", $direction, $important, $adjustment);\n",
      "line": {
        "start": 123,
        "end": 125
      }
    },
    "see": [
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "responsive-spacing-point",
        "description": "Point on the responsive spacing\nscale, corresponds to a map of breakpoints and spacing values"
      },
      {
        "type": "String",
        "name": "direction",
        "default": "all",
        "description": "Direction to add spacing to\n  (`top`, `right`, `bottom`, `left`, `all`)"
      },
      {
        "type": "Boolean",
        "name": "important",
        "default": "false",
        "description": "Whether to mark as `!important`"
      },
      {
        "type": "Number",
        "name": "adjustment",
        "default": "false",
        "description": "Offset to adjust spacing by\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n   @include govuk-responsive-margin(6, \"left\", $adjustment: 1px);\n}"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_govuk-responsive-spacing"
      }
    ],
    "file": {
      "path": "helpers/_spacing.scss",
      "name": "_spacing.scss"
    }
  },
  {
    "description": "Responsive padding\n\nAdds responsive padding by fetching a 'spacing map' from the responsive\nspacing scale, which defines different spacing values at different\nbreakpoints. Wrapper for the `_govuk-responsive-spacing` mixin.\n\n",
    "commentRange": {
      "start": 127,
      "end": 147
    },
    "context": {
      "type": "mixin",
      "name": "govuk-responsive-padding",
      "code": "\n  @include _govuk-responsive-spacing($responsive-spacing-point, \"padding\", $direction, $important, $adjustment);\n",
      "line": {
        "start": 149,
        "end": 152
      }
    },
    "see": [
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "responsive-spacing-point",
        "description": "Point on the responsive spacing\n  scale, corresponds to a map of breakpoints and spacing values"
      },
      {
        "type": "String",
        "name": "direction",
        "default": "all",
        "description": "Direction to add spacing to\n  (`top`, `right`, `bottom`, `left`, `all`)"
      },
      {
        "type": "Boolean",
        "name": "important",
        "default": "false",
        "description": "Whether to mark as `!important`"
      },
      {
        "type": "Number",
        "name": "adjustment",
        "default": "false",
        "description": "Offset to adjust spacing\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n   @include govuk-responsive-padding(6, \"left\", $adjustment: 1px);\n}"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_govuk-responsive-spacing"
      }
    ],
    "file": {
      "path": "helpers/_spacing.scss",
      "name": "_spacing.scss"
    },
    "usedBy": [
      {
        "description": "Use govuk-main-wrapper--l when you page does not have Breadcrumbs, phase\nbanners or back links.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-main-wrapper--l",
          "code": "\n  @include govuk-responsive-padding(8, \"top\");\n",
          "line": {
            "start": 47,
            "end": 49
          }
        }
      }
    ]
  },
  {
    "description": "'Common typography' helper\n\nSets the font family and associated properties, such as font smoothing. Also\noverrides the font for print.\n\n",
    "commentRange": {
      "start": 7,
      "end": 13
    },
    "context": {
      "type": "mixin",
      "name": "govuk-typography-common",
      "code": "\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If the user is using the default GDS Transport font we need to include\n  // the font-face declarations.\n  //\n  // We do not need to include the GDS Transport font-face declarations if\n  // alphagov/govuk_template is being used since nta will already be included by\n  // default.\n  @if ($govuk-include-default-font-face) {\n    @include _govuk-font-face-gds-transport;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n",
      "line": {
        "start": 15,
        "end": 33
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "font-family",
        "default": "$govuk-font-family",
        "description": "Font family to use"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_govuk-font-face-gds-transport"
      },
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "variable",
        "name": "govuk-include-default-font-face"
      },
      {
        "type": "variable",
        "name": "govuk-font-family-print"
      }
    ],
    "file": {
      "path": "helpers/_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Common link mixin\n\nProvides the typography and focus state, regardless of link style.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-common",
          "code": "\n  @include govuk-typography-common;\n\n  &:focus {\n    @include govuk-focused-text;\n  }\n",
          "line": {
            "start": 11,
            "end": 17
          }
        }
      },
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      },
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      },
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      }
    ]
  },
  {
    "description": "Text colour helper\n\nSets the text colour, including a suitable override for print.\n\n",
    "commentRange": {
      "start": 35,
      "end": 39
    },
    "context": {
      "type": "mixin",
      "name": "govuk-text-colour",
      "code": "\n  color: $govuk-text-colour;\n\n  @include govuk-media-query($media-type: print) {\n    color: $govuk-print-text-colour;\n  }\n",
      "line": {
        "start": 41,
        "end": 47
      }
    },
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "variable",
        "name": "govuk-text-colour"
      },
      {
        "type": "variable",
        "name": "govuk-print-text-colour"
      }
    ],
    "file": {
      "path": "helpers/_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Muted style link mixin\n\nUsed for secondary links on a page - the link will appear in muted colours\nregardless of visited state.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-muted",
          "code": "\n  &:link,\n  &:visited,\n  &:hover,\n  &:active {\n    color: $govuk-secondary-text-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
          "line": {
            "start": 85,
            "end": 107
          }
        }
      },
      {
        "description": "Text style link mixin\n\nOverrides the colour of links to match the text colour. Generally used by\nnavigation components, such as breadcrumbs or the back link.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-text",
          "code": "\n  // Override link colour to use text colour\n  &:link,\n  &:visited,\n  &:hover,\n  &:active,\n  &:focus {\n    @include govuk-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
          "line": {
            "start": 125,
            "end": 143
          }
        }
      },
      {
        "description": "Text style link mixin\n\nOverrides the colour of links to match the text colour. Generally used by\nnavigation components, such as breadcrumbs or the back link.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-text",
          "code": "\n  // Override link colour to use text colour\n  &:link,\n  &:visited,\n  &:hover,\n  &:active,\n  &:focus {\n    @include govuk-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
          "line": {
            "start": 125,
            "end": 143
          }
        }
      }
    ]
  },
  {
    "description": "Regular font weight helper\n\n",
    "commentRange": {
      "start": 49,
      "end": 53
    },
    "context": {
      "type": "mixin",
      "name": "govuk-typography-weight-regular",
      "code": "\n  font-weight: $govuk-font-weight-regular iff($important, !important);\n",
      "line": {
        "start": 55,
        "end": 57
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "important",
        "default": "false",
        "description": "Whether to mark declarations as\n  `!important`. Generally Used to create override classes."
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "variable",
        "name": "govuk-font-weight-regular"
      }
    ],
    "file": {
      "path": "helpers/_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      }
    ]
  },
  {
    "description": "Bold font weight helper\n\n",
    "commentRange": {
      "start": 59,
      "end": 63
    },
    "context": {
      "type": "mixin",
      "name": "govuk-typography-weight-bold",
      "code": "\n  font-weight: $govuk-font-weight-bold iff($important, !important);\n",
      "line": {
        "start": 65,
        "end": 67
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "important",
        "default": "false",
        "description": "Whether to mark declarations as\n  `!important`. Generally Used to create override classes."
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "variable",
        "name": "govuk-font-weight-bold"
      }
    ],
    "file": {
      "path": "helpers/_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      }
    ]
  },
  {
    "description": "Convert line-heights specified in pixels into a relative value, unless\nthey are already unit-less (and thus already treated as relative values)\nor the units do not match the units used for the font size.\n\n",
    "commentRange": {
      "start": 69,
      "end": 77
    },
    "context": {
      "type": "function",
      "name": "_govuk-line-height",
      "code": "\n  @if not unitless($line-height) and unit($line-height) == unit($font-size) {\n    $line-height: $line-height / $font-size;\n  }\n\n  @return $line-height;\n",
      "line": {
        "start": 79,
        "end": 85
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "line-height",
        "description": "Line height"
      },
      {
        "type": "Number",
        "name": "font-size",
        "description": "Font size"
      }
    ],
    "return": {
      "type": "Number",
      "description": "The line height as either a relative value or unmodified\n"
    },
    "access": "private",
    "group": [
      "helpers"
    ],
    "require": [],
    "file": {
      "path": "helpers/_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      }
    ]
  },
  {
    "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
    "commentRange": {
      "start": 87,
      "end": 115
    },
    "context": {
      "type": "mixin",
      "name": "govuk-typography-responsive",
      "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
      "line": {
        "start": 117,
        "end": 165
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "font-map",
        "description": "Font map"
      },
      {
        "type": "Number",
        "name": "override-line-height",
        "default": "false",
        "description": "Non responsive custom line\n  height. Omit to use the line height from the font map."
      },
      {
        "type": "Boolean",
        "name": "important",
        "default": "false",
        "description": "Whether to mark declarations as\n  `!important`.\n"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "function",
        "name": "govuk-px-to-rem"
      },
      {
        "type": "function",
        "name": "_govuk-line-height"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "variable",
        "name": "govuk-typography-scale"
      },
      {
        "type": "variable",
        "name": "govuk-typography-scale"
      },
      {
        "type": "variable",
        "name": "govuk-typography-use-rem"
      },
      {
        "type": "variable",
        "name": "govuk-typography-use-rem"
      }
    ],
    "throw": [
      "Unknown font size `#{$size}` - expected a point from the typography scale."
    ],
    "file": {
      "path": "helpers/_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      }
    ]
  },
  {
    "description": "Font helper\n\n",
    "commentRange": {
      "start": 167,
      "end": 175
    },
    "context": {
      "type": "mixin",
      "name": "govuk-font",
      "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
      "line": {
        "start": 177,
        "end": 206
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "size",
        "description": "Size of the font as it would appear on desktop -\n  uses the responsive font size map"
      },
      {
        "type": "String",
        "name": "weight",
        "default": "regular",
        "description": "Weight: `bold` or `regular`"
      },
      {
        "type": "Boolean",
        "name": "tabular",
        "default": "false",
        "description": "Whether to use tabular numbers or not"
      },
      {
        "type": "Number",
        "name": "line-height",
        "default": "false",
        "description": "Line-height, if overriding the default\n"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-typography-common"
      },
      {
        "type": "mixin",
        "name": "govuk-typography-common"
      },
      {
        "type": "mixin",
        "name": "govuk-typography-common"
      },
      {
        "type": "mixin",
        "name": "govuk-typography-weight-regular"
      },
      {
        "type": "mixin",
        "name": "govuk-typography-weight-bold"
      },
      {
        "type": "mixin",
        "name": "govuk-typography-responsive"
      },
      {
        "type": "variable",
        "name": "govuk-font-family-tabular"
      },
      {
        "type": "variable",
        "name": "govuk-font-family-tabular"
      },
      {
        "type": "variable",
        "name": "govuk-font-family-tabular"
      }
    ],
    "file": {
      "path": "helpers/_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Hide an element visually, but have it available for screen readers\n\n",
    "commentRange": {
      "start": 5,
      "end": 14
    },
    "context": {
      "type": "mixin",
      "name": "govuk-visually-hidden",
      "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
      "line": {
        "start": 16,
        "end": 37
      }
    },
    "link": [
      {
        "url": "https://snook.ca/archives/html_and_css/hiding-content-for-accessibility",
        "caption": "- Hiding Content for Accessibility, Jonathan Snook, February 2011"
      },
      {
        "url": "https://github.com/h5bp/html5-boilerplate/blob/9f13695d21ff92c55c78dfa9f16bb02a1b6e911f/src/css/main.css#L121-L158",
        "caption": "- h5bp/html5-boilerplate - Thanks!"
      }
    ],
    "parameter": [
      {
        "type": "Boolean",
        "name": "important",
        "default": "true",
        "description": "Whether to mark as `!important`\n"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      }
    ],
    "file": {
      "path": "helpers/_visually-hidden.scss",
      "name": "_visually-hidden.scss"
    }
  },
  {
    "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
    "commentRange": {
      "start": 39,
      "end": 48
    },
    "context": {
      "type": "mixin",
      "name": "govuk-visually-hidden-focusable",
      "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
      "line": {
        "start": 50,
        "end": 84
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "important",
        "default": "true",
        "description": "Whether to mark as `!important`\n"
      }
    ],
    "access": "public",
    "group": [
      "helpers"
    ],
    "require": [
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      },
      {
        "type": "function",
        "name": "iff"
      }
    ],
    "file": {
      "path": "helpers/_visually-hidden.scss",
      "name": "_visually-hidden.scss"
    }
  },
  {
    "description": "Get colour\n\n",
    "commentRange": {
      "start": 9,
      "end": 29
    },
    "context": {
      "type": "function",
      "name": "govuk-colour",
      "code": "\n  @if ($govuk-use-legacy-palette and $legacy) {\n    @if (type-of($legacy) == \"color\") {\n      @return $legacy;\n    }\n    $colour: $legacy;\n  }\n\n  $colour: quote($colour);\n\n  @if not map-has-key($govuk-colours, $colour) {\n    @error \"Unknown colour `#{$colour}`\";\n  }\n\n  @return map-get($govuk-colours, $colour);\n",
      "line": {
        "start": 31,
        "end": 46
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "colour",
        "description": "Name of colour from the colour palette\n  (`$govuk-colours`)"
      },
      {
        "type": "String",
        "name": "legacy",
        "description": "Either the name of colour from the legacy palette\n  or a colour literal, to return instead when in 'legacy mode' - matching\n  the palette from GOV.UK Template, Elements or Frontend Toolkit"
      }
    ],
    "return": {
      "type": "Colour",
      "description": "Representation of named colour\n"
    },
    "example": [
      {
        "type": "scss",
        "code": ".foo {\n  background-colour: govuk-colour(\"mid-grey\", $legacy: \"grey-2\");\n}",
        "description": "Using legacy colours from the palette"
      },
      {
        "type": "scss",
        "code": ".foo {\n  background-colour: govuk-colour(\"green\", $legacy: #BADA55);\n}",
        "description": "Using legacy colour literals"
      }
    ],
    "throw": [
      "Unknown colour `#{$colour}`"
    ],
    "access": "public",
    "group": [
      "helpers/colour"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-use-legacy-palette"
      },
      {
        "type": "variable",
        "name": "govuk-colours"
      },
      {
        "type": "variable",
        "name": "govuk-colours"
      }
    ],
    "file": {
      "path": "helpers/_colour.scss",
      "name": "_colour.scss"
    },
    "usedBy": [
      {
        "description": "Make a colour lighter by mixing it with white\n\n",
        "context": {
          "type": "function",
          "name": "govuk-tint",
          "code": "\n  @return mix(govuk-colour(\"white\"), $colour, $percentage);\n",
          "line": {
            "start": 93,
            "end": 95
          }
        }
      }
    ]
  },
  {
    "description": "Get the colour for a government organisation\n\n",
    "commentRange": {
      "start": 48,
      "end": 59
    },
    "context": {
      "type": "function",
      "name": "govuk-organisation-colour",
      "code": "\n  @if not map-has-key($govuk-colours-organisations, $organisation) {\n    @error \"Unknown organisation `#{$organisation}`\";\n  }\n\n  $org-colour: map-get($govuk-colours-organisations, $organisation);\n\n  @if ($websafe and map-has-key($org-colour, colour-websafe)) {\n    @return map-get($org-colour, colour-websafe);\n  } @else {\n    @return map-get($org-colour, colour);\n  }\n",
      "line": {
        "start": 61,
        "end": 73
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "organisation",
        "description": "Organisation name, lowercase, hyphenated"
      },
      {
        "type": "Boolean",
        "name": "websafe",
        "default": "true",
        "description": "By default a 'websafe' version of the\n  colour will be returned which meets contrast requirements . If you want to\n  use the non-websafe version you can set this to `false` but your should\n  ensure that you still meets contrast requirements for accessibility - for\n  example, don't use the non-websafe version for text.\n"
      }
    ],
    "return": {
      "type": "Colour",
      "description": "Representation of colour for organisation"
    },
    "throw": [
      "Unknown organisation `#{$organisation}`"
    ],
    "access": "public",
    "group": [
      "helpers/colour"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-colours-organisations"
      },
      {
        "type": "variable",
        "name": "govuk-colours-organisations"
      }
    ],
    "file": {
      "path": "helpers/_colour.scss",
      "name": "_colour.scss"
    }
  },
  {
    "description": "Make a colour darker by mixing it with black\n\n",
    "commentRange": {
      "start": 75,
      "end": 80
    },
    "context": {
      "type": "function",
      "name": "govuk-shade",
      "code": "\n  @return mix(#000000, $colour, $percentage);\n",
      "line": {
        "start": 82,
        "end": 84
      }
    },
    "parameter": [
      {
        "type": "Colour",
        "name": "colour",
        "description": "colour to shade"
      },
      {
        "type": "Number",
        "name": "percentage",
        "description": "percentage of `$colour` in returned color"
      }
    ],
    "return": {
      "type": "Colour"
    },
    "access": "public",
    "group": [
      "helpers/colour"
    ],
    "require": [],
    "file": {
      "path": "helpers/_colour.scss",
      "name": "_colour.scss"
    }
  },
  {
    "description": "Make a colour lighter by mixing it with white\n\n",
    "commentRange": {
      "start": 86,
      "end": 91
    },
    "context": {
      "type": "function",
      "name": "govuk-tint",
      "code": "\n  @return mix(govuk-colour(\"white\"), $colour, $percentage);\n",
      "line": {
        "start": 93,
        "end": 95
      }
    },
    "parameter": [
      {
        "type": "Colour",
        "name": "colour",
        "description": "colour to tint"
      },
      {
        "type": "Number",
        "name": "percentage",
        "description": "percentage of `$colour` in returned color"
      }
    ],
    "return": {
      "type": "Colour"
    },
    "access": "public",
    "group": [
      "helpers/colour"
    ],
    "require": [
      {
        "type": "function",
        "name": "govuk-colour"
      }
    ],
    "file": {
      "path": "helpers/_colour.scss",
      "name": "_colour.scss"
    }
  },
  {
    "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
    "commentRange": {
      "start": 9,
      "end": 20
    },
    "context": {
      "type": "mixin",
      "name": "govuk-width-container",
      "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
      "line": {
        "start": 22,
        "end": 80
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "width",
        "default": "$govuk-page-width",
        "description": "Width in pixels\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".app-width-container--wide {\n  @include govuk-width-container(1200px);\n}",
        "description": "Creating a 1200px wide container class"
      }
    ],
    "access": "public",
    "group": [
      "objects"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      },
      {
        "type": "variable",
        "name": "govuk-gutter"
      },
      {
        "type": "variable",
        "name": "govuk-gutter"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      },
      {
        "type": "variable",
        "name": "govuk-gutter-half"
      },
      {
        "type": "variable",
        "name": "govuk-gutter"
      },
      {
        "type": "variable",
        "name": "govuk-gutter"
      },
      {
        "type": "variable",
        "name": "govuk-gutter"
      }
    ],
    "file": {
      "path": "objects/_width-container.scss",
      "name": "_width-container.scss"
    }
  },
  {
    "description": "Directions for spacing\n\n",
    "commentRange": {
      "start": 9,
      "end": 12
    },
    "context": {
      "type": "variable",
      "name": "_spacing-directions",
      "value": "(\n  \"top\",\n  \"right\",\n  \"bottom\",\n  \"left\"\n)",
      "scope": "default",
      "line": {
        "start": 14,
        "end": 19
      }
    },
    "type": "Map",
    "access": "private",
    "group": [
      "overrides"
    ],
    "file": {
      "path": "overrides/_spacing.scss",
      "name": "_spacing.scss"
    },
    "usedBy": [
      {
        "description": "Spacing override classes\n\nGenerate spacing override classes for the given property (e.g. margin)\nfor each point in the spacing scale.\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-generate-spacing-overrides",
          "code": "\n  // For each point in the spacing scale (defined in settings), create an\n  // override that affects all directions...\n  @each $scale-point, $scale-map in $govuk-spacing-responsive-scale {\n\n    .govuk-\\!-#{$property}-#{$scale-point} {\n\n      @include _govuk-responsive-spacing($scale-point, $property, \"all\", true);\n    }\n\n    // ... and then an override for each individual direction\n    @each $direction in $_spacing-directions {\n\n      .govuk-\\!-#{$property}-#{$direction}-#{$scale-point} {\n        @include _govuk-responsive-spacing($scale-point, $property, $direction, true);\n      }\n    }\n  }\n",
          "line": {
            "start": 39,
            "end": 57
          }
        }
      }
    ]
  },
  {
    "description": "Spacing override classes\n\nGenerate spacing override classes for the given property (e.g. margin)\nfor each point in the spacing scale.\n\n",
    "commentRange": {
      "start": 21,
      "end": 37
    },
    "context": {
      "type": "mixin",
      "name": "_govuk-generate-spacing-overrides",
      "code": "\n  // For each point in the spacing scale (defined in settings), create an\n  // override that affects all directions...\n  @each $scale-point, $scale-map in $govuk-spacing-responsive-scale {\n\n    .govuk-\\!-#{$property}-#{$scale-point} {\n\n      @include _govuk-responsive-spacing($scale-point, $property, \"all\", true);\n    }\n\n    // ... and then an override for each individual direction\n    @each $direction in $_spacing-directions {\n\n      .govuk-\\!-#{$property}-#{$direction}-#{$scale-point} {\n        @include _govuk-responsive-spacing($scale-point, $property, $direction, true);\n      }\n    }\n  }\n",
      "line": {
        "start": 39,
        "end": 57
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "property",
        "description": "Property to add spacing to (e.g. 'margin')\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": " .govuk-\\!-margin-0 {\n    margin: 0;\n }\n\n.govuk-\\!-margin-top-1 {\n   margin-top: [whatever spacing point 1 is...]\n }"
      }
    ],
    "access": "private",
    "group": [
      "overrides"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_govuk-responsive-spacing"
      },
      {
        "type": "mixin",
        "name": "_govuk-responsive-spacing"
      },
      {
        "type": "variable",
        "name": "govuk-spacing-responsive-scale"
      },
      {
        "type": "variable",
        "name": "_spacing-directions"
      }
    ],
    "file": {
      "path": "overrides/_spacing.scss",
      "name": "_spacing.scss"
    }
  },
  {
    "description": "Path to the assets directory, with trailing slash.\n\nThis is the directory where the images and fonts subdirectories live. You\nwill need to make this directory available via your application – see the\nREADME for details.\n\n",
    "commentRange": {
      "start": 5,
      "end": 12
    },
    "context": {
      "type": "variable",
      "name": "govuk-assets-path",
      "value": "\"/assets/\"",
      "scope": "default",
      "line": {
        "start": 14,
        "end": 14
      }
    },
    "type": "String",
    "access": "public",
    "group": [
      "settings/assets"
    ],
    "file": {
      "path": "settings/_assets.scss",
      "name": "_assets.scss"
    }
  },
  {
    "description": "Path to the images folder, with trailing slash.\n\n",
    "commentRange": {
      "start": 16,
      "end": 19
    },
    "context": {
      "type": "variable",
      "name": "govuk-images-path",
      "value": "\"#{$govuk-assets-path}images/\"",
      "scope": "default",
      "line": {
        "start": 21,
        "end": 21
      }
    },
    "type": "String",
    "access": "public",
    "group": [
      "settings/assets"
    ],
    "file": {
      "path": "settings/_assets.scss",
      "name": "_assets.scss"
    },
    "usedBy": [
      {
        "description": "Image URL\n\nIf a custom image-url handler is defined ($govuk-image-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the image path.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-image-url",
          "code": "\n  $use-custom-function: variable-exists(\"govuk-image-url-function\")\n    and $govuk-image-url-function\n    and function-exists($govuk-image-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-image-url-function), $filename);\n  } @else {\n    @return url($govuk-images-path + $filename);\n  }\n",
          "line": {
            "start": 18,
            "end": 28
          }
        }
      }
    ]
  },
  {
    "description": "Path to the fonts folder, with trailing slash.\n\n",
    "commentRange": {
      "start": 23,
      "end": 26
    },
    "context": {
      "type": "variable",
      "name": "govuk-fonts-path",
      "value": "\"#{$govuk-assets-path}fonts/\"",
      "scope": "default",
      "line": {
        "start": 28,
        "end": 28
      }
    },
    "type": "String",
    "access": "public",
    "group": [
      "settings/assets"
    ],
    "file": {
      "path": "settings/_assets.scss",
      "name": "_assets.scss"
    },
    "usedBy": [
      {
        "description": "Font URL\n\nIf a custom font-url handler is defined ($govuk-font-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the font path.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-font-url",
          "code": "\n  $use-custom-function: variable-exists(\"govuk-font-url-function\")\n    and $govuk-font-url-function\n    and function-exists($govuk-font-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-font-url-function), $filename);\n  } @else {\n    @return url($govuk-fonts-path + $filename);\n  }\n",
          "line": {
            "start": 18,
            "end": 28
          }
        }
      }
    ]
  },
  {
    "description": "Custom image URL function\n\nIf the built-in image URL helper does not meet your needs, you can specify\nthe name of a custom handler – either built in or by writing your own\nfunction.\n\nIf you are writing your own handler, ensure that it returns a string wrapped\nwith `url()`\n\n",
    "commentRange": {
      "start": 30,
      "end": 53
    },
    "context": {
      "type": "variable",
      "name": "govuk-image-url-function",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 55,
        "end": 55
      }
    },
    "type": "String",
    "example": [
      {
        "type": "scss",
        "code": "$govuk-image-url-function: 'image-url';",
        "description": "Rails asset handling"
      },
      {
        "type": "scss",
        "code": "@function my-url-handler($filename) {\n  // Some custom URL handling\n  @return url('example.jpg');\n}\n\n$govuk-image-url-function: 'my-url-handler';",
        "description": "Custom asset handling"
      }
    ],
    "access": "public",
    "group": [
      "settings/assets"
    ],
    "file": {
      "path": "settings/_assets.scss",
      "name": "_assets.scss"
    },
    "usedBy": [
      {
        "description": "Image URL\n\nIf a custom image-url handler is defined ($govuk-image-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the image path.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-image-url",
          "code": "\n  $use-custom-function: variable-exists(\"govuk-image-url-function\")\n    and $govuk-image-url-function\n    and function-exists($govuk-image-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-image-url-function), $filename);\n  } @else {\n    @return url($govuk-images-path + $filename);\n  }\n",
          "line": {
            "start": 18,
            "end": 28
          }
        }
      },
      {
        "description": "Image URL\n\nIf a custom image-url handler is defined ($govuk-image-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the image path.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-image-url",
          "code": "\n  $use-custom-function: variable-exists(\"govuk-image-url-function\")\n    and $govuk-image-url-function\n    and function-exists($govuk-image-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-image-url-function), $filename);\n  } @else {\n    @return url($govuk-images-path + $filename);\n  }\n",
          "line": {
            "start": 18,
            "end": 28
          }
        }
      },
      {
        "description": "Image URL\n\nIf a custom image-url handler is defined ($govuk-image-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the image path.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-image-url",
          "code": "\n  $use-custom-function: variable-exists(\"govuk-image-url-function\")\n    and $govuk-image-url-function\n    and function-exists($govuk-image-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-image-url-function), $filename);\n  } @else {\n    @return url($govuk-images-path + $filename);\n  }\n",
          "line": {
            "start": 18,
            "end": 28
          }
        }
      }
    ]
  },
  {
    "description": "Custom font URL function\n\nIf the built-in font URL helper does not meet your needs, you can specify\nthe name of a custom handler – either built in or by writing your own\nfunction.\n\nIf you are writing your own handler, ensure that it returns a string wrapped\nwith `url()`\n\n",
    "commentRange": {
      "start": 57,
      "end": 80
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-url-function",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 82,
        "end": 82
      }
    },
    "type": "String",
    "example": [
      {
        "type": "scss",
        "code": "$govuk-font-url-function: 'font-url';",
        "description": "Rails asset handling"
      },
      {
        "type": "scss",
        "code": "@function my-url-handler($filename) {\n  // Some custom URL handling\n  @return url('example.woff');\n}\n\n$govuk-font-url-function: 'my-url-handler';",
        "description": "Custom asset handling"
      }
    ],
    "access": "public",
    "group": [
      "settings/assets"
    ],
    "file": {
      "path": "settings/_assets.scss",
      "name": "_assets.scss"
    },
    "usedBy": [
      {
        "description": "Font URL\n\nIf a custom font-url handler is defined ($govuk-font-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the font path.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-font-url",
          "code": "\n  $use-custom-function: variable-exists(\"govuk-font-url-function\")\n    and $govuk-font-url-function\n    and function-exists($govuk-font-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-font-url-function), $filename);\n  } @else {\n    @return url($govuk-fonts-path + $filename);\n  }\n",
          "line": {
            "start": 18,
            "end": 28
          }
        }
      },
      {
        "description": "Font URL\n\nIf a custom font-url handler is defined ($govuk-font-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the font path.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-font-url",
          "code": "\n  $use-custom-function: variable-exists(\"govuk-font-url-function\")\n    and $govuk-font-url-function\n    and function-exists($govuk-font-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-font-url-function), $filename);\n  } @else {\n    @return url($govuk-fonts-path + $filename);\n  }\n",
          "line": {
            "start": 18,
            "end": 28
          }
        }
      },
      {
        "description": "Font URL\n\nIf a custom font-url handler is defined ($govuk-font-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the font path.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-font-url",
          "code": "\n  $use-custom-function: variable-exists(\"govuk-font-url-function\")\n    and $govuk-font-url-function\n    and function-exists($govuk-font-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-font-url-function), $filename);\n  } @else {\n    @return url($govuk-fonts-path + $filename);\n  }\n",
          "line": {
            "start": 18,
            "end": 28
          }
        }
      }
    ]
  },
  {
    "description": "Brand colour\n\n",
    "commentRange": {
      "start": 13,
      "end": 16
    },
    "context": {
      "type": "variable",
      "name": "govuk-brand-colour",
      "value": "govuk-colour(\"blue\")",
      "scope": "default",
      "line": {
        "start": 18,
        "end": 18
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    }
  },
  {
    "description": "Text colour\n\n",
    "commentRange": {
      "start": 20,
      "end": 23
    },
    "context": {
      "type": "variable",
      "name": "govuk-text-colour",
      "value": "govuk-colour(\"black\")",
      "scope": "default",
      "line": {
        "start": 25,
        "end": 25
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Text colour helper\n\nSets the text colour, including a suitable override for print.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-text-colour",
          "code": "\n  color: $govuk-text-colour;\n\n  @include govuk-media-query($media-type: print) {\n    color: $govuk-print-text-colour;\n  }\n",
          "line": {
            "start": 41,
            "end": 47
          }
        }
      }
    ]
  },
  {
    "description": "Canvas background colour\n\nUsed by the footer component and template to give the illusion of a long\nfooter.\n\n",
    "commentRange": {
      "start": 27,
      "end": 33
    },
    "context": {
      "type": "variable",
      "name": "govuk-canvas-background-colour",
      "value": "govuk-colour(\"light-grey\", $legacy: \"grey-3\")",
      "scope": "default",
      "line": {
        "start": 35,
        "end": 35
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    }
  },
  {
    "description": "Body background colour\n\n",
    "commentRange": {
      "start": 37,
      "end": 40
    },
    "context": {
      "type": "variable",
      "name": "govuk-body-background-colour",
      "value": "govuk-colour(\"white\")",
      "scope": "default",
      "line": {
        "start": 42,
        "end": 42
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    }
  },
  {
    "description": "Text colour for print media\n\nUse 'true black' to avoid printers using colour ink to print body text\n\n",
    "commentRange": {
      "start": 44,
      "end": 49
    },
    "context": {
      "type": "variable",
      "name": "govuk-print-text-colour",
      "value": "#000000",
      "scope": "default",
      "line": {
        "start": 51,
        "end": 51
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Text colour helper\n\nSets the text colour, including a suitable override for print.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-text-colour",
          "code": "\n  color: $govuk-text-colour;\n\n  @include govuk-media-query($media-type: print) {\n    color: $govuk-print-text-colour;\n  }\n",
          "line": {
            "start": 41,
            "end": 47
          }
        }
      }
    ]
  },
  {
    "description": "Secondary text colour\n\nUsed for 'muted' text, help text, etc.\n\n",
    "commentRange": {
      "start": 53,
      "end": 58
    },
    "context": {
      "type": "variable",
      "name": "govuk-secondary-text-colour",
      "value": "govuk-colour(\"dark-grey\", $legacy: \"grey-1\")",
      "scope": "default",
      "line": {
        "start": 60,
        "end": 60
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Muted style link mixin\n\nUsed for secondary links on a page - the link will appear in muted colours\nregardless of visited state.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-muted",
          "code": "\n  &:link,\n  &:visited,\n  &:hover,\n  &:active {\n    color: $govuk-secondary-text-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
          "line": {
            "start": 85,
            "end": 107
          }
        }
      }
    ]
  },
  {
    "description": "Focus colour\n\nUsed for outline (and background, where appropriate) when interactive\nelements (links, form controls) have keyboard focus.\n\n",
    "commentRange": {
      "start": 62,
      "end": 68
    },
    "context": {
      "type": "variable",
      "name": "govuk-focus-colour",
      "value": "govuk-colour(\"yellow\")",
      "scope": "default",
      "line": {
        "start": 70,
        "end": 70
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Focused text\n\nProvides an outline to clearly indicate when the target element is focused.\nUsed for interactive text-based elements.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-focused-text",
          "code": "\n  // When colours are overridden, for example when users have a dark mode,\n  // backgrounds and box-shadows disappear, so we need to ensure there's a\n  // transparent outline which will be set to a visible colour.\n\n  // Since Internet Explorer 8 does not support box-shadow, we want to force the\n  // user-agent outlines\n  @include govuk-not-ie8 {\n    outline: $govuk-focus-width solid transparent;\n  }\n  color: $govuk-focus-text-colour;\n  background-color: $govuk-focus-colour;\n  box-shadow: 0 -2px $govuk-focus-colour, 0 4px $govuk-focus-text-colour;\n  // When link is focussed, hide the default underline since the\n  // box shadow adds the \"underline\"\n  text-decoration: none;\n",
          "line": {
            "start": 12,
            "end": 28
          }
        }
      },
      {
        "description": "Focused text\n\nProvides an outline to clearly indicate when the target element is focused.\nUsed for interactive text-based elements.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-focused-text",
          "code": "\n  // When colours are overridden, for example when users have a dark mode,\n  // backgrounds and box-shadows disappear, so we need to ensure there's a\n  // transparent outline which will be set to a visible colour.\n\n  // Since Internet Explorer 8 does not support box-shadow, we want to force the\n  // user-agent outlines\n  @include govuk-not-ie8 {\n    outline: $govuk-focus-width solid transparent;\n  }\n  color: $govuk-focus-text-colour;\n  background-color: $govuk-focus-colour;\n  box-shadow: 0 -2px $govuk-focus-colour, 0 4px $govuk-focus-text-colour;\n  // When link is focussed, hide the default underline since the\n  // box shadow adds the \"underline\"\n  text-decoration: none;\n",
          "line": {
            "start": 12,
            "end": 28
          }
        }
      }
    ]
  },
  {
    "description": "Focused text colour\n\nEnsure that the contrast between the text and background colour passes\nWCAG Level AA contrast requirements.\n\n",
    "commentRange": {
      "start": 72,
      "end": 78
    },
    "context": {
      "type": "variable",
      "name": "govuk-focus-text-colour",
      "value": "govuk-colour(\"black\")",
      "scope": "default",
      "line": {
        "start": 80,
        "end": 80
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Focused text\n\nProvides an outline to clearly indicate when the target element is focused.\nUsed for interactive text-based elements.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-focused-text",
          "code": "\n  // When colours are overridden, for example when users have a dark mode,\n  // backgrounds and box-shadows disappear, so we need to ensure there's a\n  // transparent outline which will be set to a visible colour.\n\n  // Since Internet Explorer 8 does not support box-shadow, we want to force the\n  // user-agent outlines\n  @include govuk-not-ie8 {\n    outline: $govuk-focus-width solid transparent;\n  }\n  color: $govuk-focus-text-colour;\n  background-color: $govuk-focus-colour;\n  box-shadow: 0 -2px $govuk-focus-colour, 0 4px $govuk-focus-text-colour;\n  // When link is focussed, hide the default underline since the\n  // box shadow adds the \"underline\"\n  text-decoration: none;\n",
          "line": {
            "start": 12,
            "end": 28
          }
        }
      },
      {
        "description": "Focused text\n\nProvides an outline to clearly indicate when the target element is focused.\nUsed for interactive text-based elements.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-focused-text",
          "code": "\n  // When colours are overridden, for example when users have a dark mode,\n  // backgrounds and box-shadows disappear, so we need to ensure there's a\n  // transparent outline which will be set to a visible colour.\n\n  // Since Internet Explorer 8 does not support box-shadow, we want to force the\n  // user-agent outlines\n  @include govuk-not-ie8 {\n    outline: $govuk-focus-width solid transparent;\n  }\n  color: $govuk-focus-text-colour;\n  background-color: $govuk-focus-colour;\n  box-shadow: 0 -2px $govuk-focus-colour, 0 4px $govuk-focus-text-colour;\n  // When link is focussed, hide the default underline since the\n  // box shadow adds the \"underline\"\n  text-decoration: none;\n",
          "line": {
            "start": 12,
            "end": 28
          }
        }
      },
      {
        "description": "Default link style mixin\n\nProvides the default unvisited, visited, hover and active states for links.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-default",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-visited-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector\n  // designed to make unvisited link  s a slightly darker blue when focussed, so\n  // we need to override the text colour for that combination of selectors so\n  // so that unvisited links styled as buttons do not end up with dark blue\n  // text when focussed.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      color: $govuk-focus-text-colour;\n    }\n  }\n",
          "line": {
            "start": 34,
            "end": 67
          }
        }
      },
      {
        "description": "Default link style mixin\n\nProvides the default unvisited, visited, hover and active states for links.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-default",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-visited-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector\n  // designed to make unvisited link  s a slightly darker blue when focussed, so\n  // we need to override the text colour for that combination of selectors so\n  // so that unvisited links styled as buttons do not end up with dark blue\n  // text when focussed.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      color: $govuk-focus-text-colour;\n    }\n  }\n",
          "line": {
            "start": 34,
            "end": 67
          }
        }
      },
      {
        "description": "Muted style link mixin\n\nUsed for secondary links on a page - the link will appear in muted colours\nregardless of visited state.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-muted",
          "code": "\n  &:link,\n  &:visited,\n  &:hover,\n  &:active {\n    color: $govuk-secondary-text-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
          "line": {
            "start": 85,
            "end": 107
          }
        }
      },
      {
        "description": "No visited state link mixin\n\nUsed in cases where it is not helpful to distinguish between visited and\nnon-visited links.\n\nFor example, navigation links to pages with dynamic content like admin\ndashboards. The content on the page is changing all the time, so the fact\nthat you’ve visited it before is not important.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-no-visited-state",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n",
          "line": {
            "start": 166,
            "end": 188
          }
        }
      }
    ]
  },
  {
    "description": "Error colour\n\nUsed to highlight error messages and form controls in an error state\n\n",
    "commentRange": {
      "start": 82,
      "end": 87
    },
    "context": {
      "type": "variable",
      "name": "govuk-error-colour",
      "value": "govuk-colour(\"red\")",
      "scope": "default",
      "line": {
        "start": 89,
        "end": 89
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    }
  },
  {
    "description": "Border colour\n\nUsed for borders, separators, rules, keylines etc.\n\n",
    "commentRange": {
      "start": 91,
      "end": 96
    },
    "context": {
      "type": "variable",
      "name": "govuk-border-colour",
      "value": "govuk-colour(\"mid-grey\", $legacy: \"grey-2\")",
      "scope": "private",
      "line": {
        "start": 98,
        "end": 98
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    }
  },
  {
    "description": "Input border colour\n\nUsed for form inputs and controls\n\n",
    "commentRange": {
      "start": 100,
      "end": 105
    },
    "context": {
      "type": "variable",
      "name": "govuk-input-border-colour",
      "value": "govuk-colour(\"black\")",
      "scope": "default",
      "line": {
        "start": 107,
        "end": 107
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    }
  },
  {
    "description": "Input hover colour\n\nUsed for hover states on form controls\n\n",
    "commentRange": {
      "start": 109,
      "end": 114
    },
    "context": {
      "type": "variable",
      "name": "govuk-hover-colour",
      "value": "govuk-colour(\"mid-grey\", $legacy: \"grey-3\")",
      "scope": "private",
      "line": {
        "start": 116,
        "end": 116
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    }
  },
  {
    "description": "Link colour\n\n",
    "commentRange": {
      "start": 123,
      "end": 126
    },
    "context": {
      "type": "variable",
      "name": "govuk-link-colour",
      "value": "govuk-colour(\"blue\")",
      "scope": "default",
      "line": {
        "start": 128,
        "end": 128
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Default link style mixin\n\nProvides the default unvisited, visited, hover and active states for links.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-default",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-visited-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector\n  // designed to make unvisited link  s a slightly darker blue when focussed, so\n  // we need to override the text colour for that combination of selectors so\n  // so that unvisited links styled as buttons do not end up with dark blue\n  // text when focussed.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      color: $govuk-focus-text-colour;\n    }\n  }\n",
          "line": {
            "start": 34,
            "end": 67
          }
        }
      },
      {
        "description": "No visited state link mixin\n\nUsed in cases where it is not helpful to distinguish between visited and\nnon-visited links.\n\nFor example, navigation links to pages with dynamic content like admin\ndashboards. The content on the page is changing all the time, so the fact\nthat you’ve visited it before is not important.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-no-visited-state",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n",
          "line": {
            "start": 166,
            "end": 188
          }
        }
      },
      {
        "description": "No visited state link mixin\n\nUsed in cases where it is not helpful to distinguish between visited and\nnon-visited links.\n\nFor example, navigation links to pages with dynamic content like admin\ndashboards. The content on the page is changing all the time, so the fact\nthat you’ve visited it before is not important.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-no-visited-state",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n",
          "line": {
            "start": 166,
            "end": 188
          }
        }
      }
    ]
  },
  {
    "description": "Visited link colour\n\n",
    "commentRange": {
      "start": 130,
      "end": 133
    },
    "context": {
      "type": "variable",
      "name": "govuk-link-visited-colour",
      "value": "govuk-colour(\"purple\", $legacy: #4c2c92)",
      "scope": "default",
      "line": {
        "start": 135,
        "end": 135
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Default link style mixin\n\nProvides the default unvisited, visited, hover and active states for links.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-default",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-visited-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector\n  // designed to make unvisited link  s a slightly darker blue when focussed, so\n  // we need to override the text colour for that combination of selectors so\n  // so that unvisited links styled as buttons do not end up with dark blue\n  // text when focussed.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      color: $govuk-focus-text-colour;\n    }\n  }\n",
          "line": {
            "start": 34,
            "end": 67
          }
        }
      }
    ]
  },
  {
    "description": "Link hover colour\n\n",
    "commentRange": {
      "start": 137,
      "end": 140
    },
    "context": {
      "type": "variable",
      "name": "govuk-link-hover-colour",
      "value": "govuk-colour(\"dark-blue\", $legacy: \"light-blue\")",
      "scope": "default",
      "line": {
        "start": 142,
        "end": 142
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Default link style mixin\n\nProvides the default unvisited, visited, hover and active states for links.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-default",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-visited-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector\n  // designed to make unvisited link  s a slightly darker blue when focussed, so\n  // we need to override the text colour for that combination of selectors so\n  // so that unvisited links styled as buttons do not end up with dark blue\n  // text when focussed.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      color: $govuk-focus-text-colour;\n    }\n  }\n",
          "line": {
            "start": 34,
            "end": 67
          }
        }
      },
      {
        "description": "No visited state link mixin\n\nUsed in cases where it is not helpful to distinguish between visited and\nnon-visited links.\n\nFor example, navigation links to pages with dynamic content like admin\ndashboards. The content on the page is changing all the time, so the fact\nthat you’ve visited it before is not important.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-no-visited-state",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n",
          "line": {
            "start": 166,
            "end": 188
          }
        }
      }
    ]
  },
  {
    "description": "Active link colour\n\n",
    "commentRange": {
      "start": 144,
      "end": 147
    },
    "context": {
      "type": "variable",
      "name": "govuk-link-active-colour",
      "value": "govuk-colour(\"black\", $legacy: \"light-blue\")",
      "scope": "default",
      "line": {
        "start": 149,
        "end": 149
      }
    },
    "type": "Colour",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-applied.scss",
      "name": "_colours-applied.scss"
    },
    "usedBy": [
      {
        "description": "Default link style mixin\n\nProvides the default unvisited, visited, hover and active states for links.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-default",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-visited-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector\n  // designed to make unvisited link  s a slightly darker blue when focussed, so\n  // we need to override the text colour for that combination of selectors so\n  // so that unvisited links styled as buttons do not end up with dark blue\n  // text when focussed.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      color: $govuk-focus-text-colour;\n    }\n  }\n",
          "line": {
            "start": 34,
            "end": 67
          }
        }
      },
      {
        "description": "No visited state link mixin\n\nUsed in cases where it is not helpful to distinguish between visited and\nnon-visited links.\n\nFor example, navigation links to pages with dynamic content like admin\ndashboards. The content on the page is changing all the time, so the fact\nthat you’ve visited it before is not important.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-no-visited-state",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n",
          "line": {
            "start": 166,
            "end": 188
          }
        }
      }
    ]
  },
  {
    "description": "Organisation colours\n\n",
    "commentRange": {
      "start": 5,
      "end": 15
    },
    "context": {
      "type": "variable",
      "name": "govuk-colours-organisations",
      "value": "(\n  \"attorney-generals-office\": (\n    colour: #9f1888,\n    colour-websafe: #a03a88\n  ),\n  \"cabinet-office\": (\n    colour: #005abb,\n    colour-websafe: #347da4\n  ),\n  \"civil-service\": (\n    colour: #af292e\n  ),\n  \"department-for-business-innovation-skills\": (\n    colour: #003479,\n    colour-websafe: #347da4\n  ),\n  \"department-for-communities-and-local-government\": (\n    colour: #009999,\n    colour-websafe: #37836e\n  ),\n  \"department-for-culture-media-sport\": (\n    colour: #d40072,\n    colour-websafe: #a03155\n  ),\n  \"department-for-education\": (\n    colour: #003a69,\n    colour-websafe: #347ca9\n  ),\n  \"department-for-environment-food-rural-affairs\": (\n    colour: #00a33b,\n    colour-websafe: #008938\n  ),\n  \"department-for-international-development\": (\n    colour: #002878,\n    colour-websafe: #405e9a\n  ),\n  \"department-for-international-trade\": (\n    colour: #cf102d,\n    colour-websafe: #005ea5\n  ),\n  \"department-for-transport\": (\n    colour: #006c56,\n    colour-websafe: #398373\n  ),\n  \"department-for-work-pensions\": (\n    colour: #00beb7,\n    colour-websafe: #37807b\n  ),\n  \"department-of-energy-climate-change\": (\n    colour: #009ddb,\n    colour-websafe: #2b7cac\n  ),\n  \"department-of-health\": (\n    colour: #00ad93,\n    colour-websafe: #39836e\n  ),\n  \"foreign-commonwealth-office\": (\n    colour: #003e74,\n    colour-websafe: #406e97\n  ),\n  \"government-equalities-office\": (\n    colour:  #9325b2\n  ),\n  \"hm-government\": (\n    colour: #0076c0,\n    colour-websafe: #347da4\n  ),\n  \"hm-revenue-customs\": (\n    colour: #009390,\n    colour-websafe: #008670\n  ),\n  \"hm-treasury\": (\n    colour: #af292e,\n    colour-websafe: #832322\n  ),\n  \"home-office\": (\n    colour: #9325b2,\n    colour-websafe: #9440b2\n  ),\n  \"ministry-of-defence\": (\n    colour: #4d2942,\n    colour-websafe: #5a5c92\n  ),\n  \"ministry-of-justice\": (\n    colour: #231f20,\n    colour-websafe: #5a5c92\n  ),\n  \"northern-ireland-office\": (\n    colour: #002663,\n    colour-websafe: #3e598c\n  ),\n  \"office-of-the-advocate-general-for-scotland\": (\n    colour: #002663,\n    colour-websafe: #005ea5\n  ),\n  \"office-of-the-leader-of-the-house-of-commons\": (\n    colour: #317023,\n    colour-websafe: #005f8f\n  ),\n  \"office-of-the-leader-of-the-house-of-lords\": (\n    colour: #9c132e,\n    colour-websafe: #c2395d\n  ),\n  \"scotland-office\": (\n    colour: #002663,\n    colour-websafe: #405c8a\n  ),\n  \"uk-export-finance\": (\n    colour: #005747,\n    colour-websafe: #005ea5\n  ),\n  \"uk-trade-investment\": (\n    colour: #c80651,\n    colour-websafe: #005ea5\n  ),\n  \"wales-office\": (\n    colour: #a33038,\n    colour-websafe: #7a242a\n  )\n)",
      "scope": "default",
      "line": {
        "start": 17,
        "end": 136
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Map",
        "name": "$organisation.colour",
        "description": "Colour for the given `$organisation`"
      },
      {
        "type": "Map",
        "name": "$organisation.colour-websafe",
        "description": "Websafe colour for the given\n  `$organisation`. We use `websafe` to mean strong enough contrast against\n  white to be used for copy and meet the AAA (large text) and AA (smaller\n  copy) WCAG guidelines."
      }
    ],
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-organisations.scss",
      "name": "_colours-organisations.scss"
    },
    "usedBy": [
      {
        "description": "Get the colour for a government organisation\n\n",
        "context": {
          "type": "function",
          "name": "govuk-organisation-colour",
          "code": "\n  @if not map-has-key($govuk-colours-organisations, $organisation) {\n    @error \"Unknown organisation `#{$organisation}`\";\n  }\n\n  $org-colour: map-get($govuk-colours-organisations, $organisation);\n\n  @if ($websafe and map-has-key($org-colour, colour-websafe)) {\n    @return map-get($org-colour, colour-websafe);\n  } @else {\n    @return map-get($org-colour, colour);\n  }\n",
          "line": {
            "start": 61,
            "end": 73
          }
        }
      },
      {
        "description": "Get the colour for a government organisation\n\n",
        "context": {
          "type": "function",
          "name": "govuk-organisation-colour",
          "code": "\n  @if not map-has-key($govuk-colours-organisations, $organisation) {\n    @error \"Unknown organisation `#{$organisation}`\";\n  }\n\n  $org-colour: map-get($govuk-colours-organisations, $organisation);\n\n  @if ($websafe and map-has-key($org-colour, colour-websafe)) {\n    @return map-get($org-colour, colour-websafe);\n  } @else {\n    @return map-get($org-colour, colour);\n  }\n",
          "line": {
            "start": 61,
            "end": 73
          }
        }
      }
    ]
  },
  {
    "description": "Use 'legacy' colour palette\n\nWhether or not to use the colour palette from GOV.UK Elements / Frontend\nToolkit, for teams that are migrating to GOV.UK Frontend and may be using\ncomponents from both places in a single application.\n\n",
    "commentRange": {
      "start": 7,
      "end": 14
    },
    "context": {
      "type": "variable",
      "name": "govuk-use-legacy-palette",
      "value": "if((\n    $govuk-compatibility-govukfrontendtoolkit or\n    $govuk-compatibility-govuktemplate or\n    $govuk-compatibility-govukelements\n  ), true, false)",
      "scope": "default",
      "line": {
        "start": 16,
        "end": 20
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-palette.scss",
      "name": "_colours-palette.scss"
    },
    "usedBy": [
      {
        "description": "Get colour\n\n",
        "context": {
          "type": "function",
          "name": "govuk-colour",
          "code": "\n  @if ($govuk-use-legacy-palette and $legacy) {\n    @if (type-of($legacy) == \"color\") {\n      @return $legacy;\n    }\n    $colour: $legacy;\n  }\n\n  $colour: quote($colour);\n\n  @if not map-has-key($govuk-colours, $colour) {\n    @error \"Unknown colour `#{$colour}`\";\n  }\n\n  @return map-get($govuk-colours, $colour);\n",
          "line": {
            "start": 31,
            "end": 46
          }
        }
      }
    ]
  },
  {
    "description": "Legacy colour palette\n\nThis exists only because you cannot easily set a !default variable\nconditionally (thanks to the way scope works in Sass) so we set\n`$govuk-colour-palette` using the `if` function.\n\n",
    "commentRange": {
      "start": 22,
      "end": 28
    },
    "context": {
      "type": "variable",
      "name": "_govuk-colour-palette-legacy",
      "value": "(\n  \"purple\": #2e358b,\n  \"light-purple\": #6f72af,\n  \"bright-purple\": #912b88,\n  \"pink\": #d53880,\n  \"light-pink\": #f499be,\n  \"red\": #b10e1e,\n  \"bright-red\": #df3034,\n  \"orange\": #f47738,\n  \"brown\": #b58840,\n  \"yellow\": #ffbf47,\n  \"light-green\": #85994b,\n  \"green\": #006435,\n  \"turquoise\": #28a197,\n  \"light-blue\": #2b8cc4,\n  \"blue\": #005ea5,\n\n  \"black\": #0b0c0c,\n  \"grey-1\": #6f777b,\n  \"grey-2\": #bfc1c3,\n  \"grey-3\": #dee0e2,\n  \"grey-4\": #f8f8f8,\n  \"white\": #ffffff\n)",
      "scope": "private",
      "line": {
        "start": 30,
        "end": 53
      }
    },
    "access": "private",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-palette.scss",
      "name": "_colours-palette.scss"
    }
  },
  {
    "description": "Modern colour palette\n\nThis exists only because you cannot easily set a !default variable\nconditionally (thanks to the way scope works in Sass) so we set\n`$govuk-colour-palette` using the `if` function.\n\n",
    "commentRange": {
      "start": 55,
      "end": 61
    },
    "context": {
      "type": "variable",
      "name": "_govuk-colour-palette-modern",
      "value": "(\n  \"red\": #d4351c,\n  \"yellow\": #ffdd00,\n  \"green\": #00703c,\n  \"blue\": #1d70b8,\n  \"dark-blue\": #003078,\n  \"light-blue\": #5694ca,\n  \"purple\": #4c2c92,\n\n  \"black\": #0b0c0c,\n  \"dark-grey\": #626a6e,\n  \"mid-grey\": #b1b4b6,\n  \"light-grey\": #f3f2f1,\n  \"white\": #ffffff,\n\n  \"light-purple\": #6f72af,\n  \"bright-purple\": #912b88,\n  \"pink\": #d53880,\n  \"light-pink\": #f499be,\n  \"orange\": #f47738,\n  \"brown\": #b58840,\n  \"light-green\": #85994b,\n  \"turquoise\": #28a197\n)",
      "scope": "private",
      "line": {
        "start": 63,
        "end": 86
      }
    },
    "access": "private",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-palette.scss",
      "name": "_colours-palette.scss"
    }
  },
  {
    "description": "Colour palette\n\n",
    "commentRange": {
      "start": 88,
      "end": 95
    },
    "context": {
      "type": "variable",
      "name": "govuk-colours",
      "value": "if(\n  $govuk-use-legacy-palette,\n  $_govuk-colour-palette-legacy,\n  $_govuk-colour-palette-modern\n)",
      "scope": "default",
      "line": {
        "start": 97,
        "end": 101
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Map",
        "name": "$colour",
        "description": "Representation for the given $colour, where $colour is the\n  friendly name for the colour (e.g. \"red\": #ff0000);"
      }
    ],
    "access": "public",
    "group": [
      "settings/colours"
    ],
    "file": {
      "path": "settings/_colours-palette.scss",
      "name": "_colours-palette.scss"
    },
    "usedBy": [
      {
        "description": "Get colour\n\n",
        "context": {
          "type": "function",
          "name": "govuk-colour",
          "code": "\n  @if ($govuk-use-legacy-palette and $legacy) {\n    @if (type-of($legacy) == \"color\") {\n      @return $legacy;\n    }\n    $colour: $legacy;\n  }\n\n  $colour: quote($colour);\n\n  @if not map-has-key($govuk-colours, $colour) {\n    @error \"Unknown colour `#{$colour}`\";\n  }\n\n  @return map-get($govuk-colours, $colour);\n",
          "line": {
            "start": 31,
            "end": 46
          }
        }
      },
      {
        "description": "Get colour\n\n",
        "context": {
          "type": "function",
          "name": "govuk-colour",
          "code": "\n  @if ($govuk-use-legacy-palette and $legacy) {\n    @if (type-of($legacy) == \"color\") {\n      @return $legacy;\n    }\n    $colour: $legacy;\n  }\n\n  $colour: quote($colour);\n\n  @if not map-has-key($govuk-colours, $colour) {\n    @error \"Unknown colour `#{$colour}`\";\n  }\n\n  @return map-get($govuk-colours, $colour);\n",
          "line": {
            "start": 31,
            "end": 46
          }
        }
      }
    ]
  },
  {
    "description": "Compatibility Mode: alphagov/govuk_frontend_toolkit\n\nSet this to true if you are also including alphagov/govuk_frontend_toolkit\nin your application.\n\n",
    "commentRange": {
      "start": 20,
      "end": 26
    },
    "context": {
      "type": "variable",
      "name": "govuk-compatibility-govukfrontendtoolkit",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 28,
        "end": 28
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/compatibility"
    ],
    "file": {
      "path": "settings/_compatibility.scss",
      "name": "_compatibility.scss"
    }
  },
  {
    "description": "Compatibility Mode: alphagov/govuk_template\n\nEnabling this will:\n\n- prevent GOV.UK Frontend from including the New Transport typeface, as\n  it'll use the version of New Transport included with GOV.UK Template.\n\n- alter some of the CSS outputted by GOV.UK Frontend to 'counter'\n  specific CSS rules in GOV.UK Template.\n\nSet this to true if you are also including alphagov/govuk_template in your\napplication.\n\n",
    "commentRange": {
      "start": 30,
      "end": 44
    },
    "context": {
      "type": "variable",
      "name": "govuk-compatibility-govuktemplate",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 46,
        "end": 46
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/compatibility"
    ],
    "file": {
      "path": "settings/_compatibility.scss",
      "name": "_compatibility.scss"
    }
  },
  {
    "description": "Compatibility Mode: alphagov/govuk_elements\n\nEnabling this will:\n\n- alter some of the CSS outputted by GOV.UK Frontend to 'counter'\n  specific CSS rules in GOV.UK Elements.\n\nSet this to true if you are also including alphagov/govuk_elements in your\napplication.\n\n",
    "commentRange": {
      "start": 48,
      "end": 59
    },
    "context": {
      "type": "variable",
      "name": "govuk-compatibility-govukelements",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 61,
        "end": 61
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/compatibility"
    ],
    "file": {
      "path": "settings/_compatibility.scss",
      "name": "_compatibility.scss"
    }
  },
  {
    "description": "Compatibility Product Map\n\nMaps product names to their settings that we can use to lookup states from\nwithin the `@govuk-compatibility` mixin.\n\n",
    "commentRange": {
      "start": 63,
      "end": 69
    },
    "context": {
      "type": "variable",
      "name": "_govuk-compatibility",
      "value": "(\n  govuk_frontend_toolkit: $govuk-compatibility-govukfrontendtoolkit,\n  govuk_template: $govuk-compatibility-govuktemplate,\n  govuk_elements: $govuk-compatibility-govukelements,\n)",
      "scope": "private",
      "line": {
        "start": 71,
        "end": 75
      }
    },
    "type": "Map",
    "access": "private",
    "group": [
      "settings/compatibility"
    ],
    "file": {
      "path": "settings/_compatibility.scss",
      "name": "_compatibility.scss"
    },
    "usedBy": [
      {
        "description": "Conditional Compatibility Mixin\n\nSelectively output a block (available to the mixin as @content) if a given\n$product is also identified as being used in the project.\n\nThis can then be used to include styles that are only needed to override\nstyles provided by those other products (e.g. where govuk_template has a\nvery specific link selector that otherwise affects buttons).\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-compatibility",
          "code": "\n  @if map-has-key($_govuk-compatibility, $product) {\n    @if map-get($_govuk-compatibility, $product) == true {\n      @content;\n    }\n  } @else {\n    @error \"Non existent product '#{$product}'\";\n  }\n",
          "line": {
            "start": 28,
            "end": 36
          }
        }
      },
      {
        "description": "Conditional Compatibility Mixin\n\nSelectively output a block (available to the mixin as @content) if a given\n$product is also identified as being used in the project.\n\nThis can then be used to include styles that are only needed to override\nstyles provided by those other products (e.g. where govuk_template has a\nvery specific link selector that otherwise affects buttons).\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-compatibility",
          "code": "\n  @if map-has-key($_govuk-compatibility, $product) {\n    @if map-get($_govuk-compatibility, $product) == true {\n      @content;\n    }\n  } @else {\n    @error \"Non existent product '#{$product}'\";\n  }\n",
          "line": {
            "start": 28,
            "end": 36
          }
        }
      }
    ]
  },
  {
    "description": "Include 'global' styles\n\nWhether to style paragraphs (`<p>`) and links (`<a>`) without explicitly\nhaving to apply the `govuk-body` and `govuk-link` classes.\n\n",
    "commentRange": {
      "start": 5,
      "end": 11
    },
    "context": {
      "type": "variable",
      "name": "govuk-global-styles",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 13,
        "end": 13
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/global-styles"
    ],
    "file": {
      "path": "settings/_global-styles.scss",
      "name": "_global-styles.scss"
    }
  },
  {
    "description": "Whether the stylesheet being built is targeting Internet Explorer 8.\n\n",
    "commentRange": {
      "start": 5,
      "end": 8
    },
    "context": {
      "type": "variable",
      "name": "govuk-is-ie8",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 10,
        "end": 10
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/ie8"
    ],
    "file": {
      "path": "settings/_ie8.scss",
      "name": "_ie8.scss"
    },
    "usedBy": [
      {
        "description": "Conditionally include rules only for IE8\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-if-ie8",
          "code": "\n  @if $govuk-is-ie8 {\n    @content;\n  }\n",
          "line": {
            "start": 22,
            "end": 26
          }
        }
      },
      {
        "description": "Conditionally exclude rules for IE8\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-not-ie8",
          "code": "\n  @if not $govuk-is-ie8 {\n    @content;\n  }\n",
          "line": {
            "start": 47,
            "end": 51
          }
        }
      }
    ]
  },
  {
    "description": "The name of the breakpoint to use as the target when rasterizing media\nqueries\n\n",
    "commentRange": {
      "start": 12,
      "end": 16
    },
    "context": {
      "type": "variable",
      "name": "govuk-ie8-breakpoint",
      "value": "desktop",
      "scope": "default",
      "line": {
        "start": 18,
        "end": 18
      }
    },
    "type": "String",
    "access": "public",
    "group": [
      "settings/ie8"
    ],
    "file": {
      "path": "settings/_ie8.scss",
      "name": "_ie8.scss"
    }
  },
  {
    "description": "Width of main container\n\n",
    "commentRange": {
      "start": 11,
      "end": 14
    },
    "context": {
      "type": "variable",
      "name": "govuk-page-width",
      "value": "960px",
      "scope": "default",
      "line": {
        "start": 16,
        "end": 16
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    }
  },
  {
    "description": "Map of grid column widths\n\n",
    "commentRange": {
      "start": 18,
      "end": 21
    },
    "context": {
      "type": "variable",
      "name": "govuk-grid-widths",
      "value": "(\n  one-quarter: 25%,\n  one-third: 33.3333%,\n  one-half: 50%,\n  two-thirds: 66.6666%,\n  three-quarters: 75%,\n  full: 100%\n)",
      "scope": "default",
      "line": {
        "start": 23,
        "end": 30
      }
    },
    "type": "Map",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    },
    "usedBy": [
      {
        "description": "Grid width percentage\n\n",
        "context": {
          "type": "function",
          "name": "govuk-grid-width",
          "code": "\n  @if map-has-key($govuk-grid-widths, $key) {\n    @return map-get($govuk-grid-widths, $key);\n  }\n\n  @error \"Unknown grid width `#{$key}`\";\n",
          "line": {
            "start": 12,
            "end": 18
          }
        }
      },
      {
        "description": "Grid width percentage\n\n",
        "context": {
          "type": "function",
          "name": "govuk-grid-width",
          "code": "\n  @if map-has-key($govuk-grid-widths, $key) {\n    @return map-get($govuk-grid-widths, $key);\n  }\n\n  @error \"Unknown grid width `#{$key}`\";\n",
          "line": {
            "start": 12,
            "end": 18
          }
        }
      }
    ]
  },
  {
    "description": "Width of gutter between grid columns\n\n",
    "commentRange": {
      "start": 32,
      "end": 35
    },
    "context": {
      "type": "variable",
      "name": "govuk-gutter",
      "value": "30px",
      "scope": "default",
      "line": {
        "start": 37,
        "end": 37
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    },
    "usedBy": [
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      }
    ]
  },
  {
    "description": "Width of half the gutter between grid columns\n\n",
    "commentRange": {
      "start": 39,
      "end": 42
    },
    "context": {
      "type": "variable",
      "name": "govuk-gutter-half",
      "value": "$govuk-gutter / 2",
      "scope": "private",
      "line": {
        "start": 44,
        "end": 44
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    },
    "usedBy": [
      {
        "description": "Generate grid column styles\n\nCreates a grid column with standard gutter between the columns.\n\nGrid widths are defined in the `$govuk-grid-widths` map.\n\nBy default the column width changes from 100% to specified width at the\n'tablet' breakpoint, but other breakpoints can be specified using the `$at`\nparameter.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-grid-column",
          "code": "\n  box-sizing: border-box;\n  @if $at != desktop {\n    width: 100%;\n  }\n  padding: 0 $govuk-gutter-half;\n  @include govuk-media-query($from: $at) {\n    width: govuk-grid-width($width);\n    float: $float;\n  }\n",
          "line": {
            "start": 50,
            "end": 60
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      },
      {
        "description": "Width container mixin\n\nUsed to create page width and custom width container classes.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-width-container",
          "code": "\n\n  // By default, limit the width of the container to the page width\n  max-width: $width;\n\n  // On mobile, add half width gutters\n  margin-right: $govuk-gutter-half;\n  margin-left: $govuk-gutter-half;\n\n  // Respect 'display cutout' safe area (avoids notches and rounded corners)\n  @supports (margin: unquote(\"max(calc(0px))\")) {\n    $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n    $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n    // Use max() to pick largest margin, default or with safe area\n    // Escaped due to Sass max() vs. CSS native max()\n    margin-right: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-right})\");\n    margin-left: unquote(\"max(#{$govuk-gutter-half}, #{$gutter-safe-area-left})\");\n  }\n\n  // On tablet, add full width gutters\n  @include govuk-media-query($from: tablet) {\n    margin-right: $govuk-gutter;\n    margin-left: $govuk-gutter;\n\n    // Respect 'display cutout' safe area (avoids notches and rounded corners)\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      $gutter-safe-area-right: calc(#{$govuk-gutter-half} + env(safe-area-inset-right));\n      $gutter-safe-area-left: calc(#{$govuk-gutter-half} + env(safe-area-inset-left));\n\n      // Use max() to pick largest margin, default or with safe area\n      // Escaped due to Sass max() vs. CSS native max()\n      margin-right: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-right})\");\n      margin-left: unquote(\"max(#{$govuk-gutter}, #{$gutter-safe-area-left})\");\n    }\n  }\n\n  // As soon as the viewport is greater than the width of the page plus the\n  // gutters, just centre the content instead of adding gutters.\n  @include govuk-media-query($and: \"(min-width: #{($width + $govuk-gutter * 2)})\") {\n    margin-right: auto;\n    margin-left: auto;\n\n    // Since a safe area may have previously been set above,\n    // we need to duplicate this margin that centers the page.\n    @supports (margin: unquote(\"max(calc(0px))\")) {\n      margin-right: auto;\n      margin-left: auto;\n    }\n  }\n\n  @include govuk-if-ie8 {\n    width: $width;\n    // Since media queries are not supported in IE8,\n    // we need to duplicate this margin that centers the page.\n    margin-right: auto;\n    margin-left: auto;\n  }\n",
          "line": {
            "start": 22,
            "end": 80
          }
        }
      }
    ]
  },
  {
    "description": "Standard border width\n\n",
    "commentRange": {
      "start": 52,
      "end": 55
    },
    "context": {
      "type": "variable",
      "name": "govuk-border-width",
      "value": "5px",
      "scope": "default",
      "line": {
        "start": 57,
        "end": 57
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    }
  },
  {
    "description": "Wide border width\n\n",
    "commentRange": {
      "start": 59,
      "end": 62
    },
    "context": {
      "type": "variable",
      "name": "govuk-border-width-wide",
      "value": "10px",
      "scope": "default",
      "line": {
        "start": 64,
        "end": 64
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    }
  },
  {
    "description": "Narrow border width\n\n",
    "commentRange": {
      "start": 66,
      "end": 69
    },
    "context": {
      "type": "variable",
      "name": "govuk-border-width-narrow",
      "value": "4px",
      "scope": "default",
      "line": {
        "start": 71,
        "end": 71
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    }
  },
  {
    "description": "Form control border width\n\n",
    "commentRange": {
      "start": 73,
      "end": 76
    },
    "context": {
      "type": "variable",
      "name": "govuk-border-width-form-element",
      "value": "2px",
      "scope": "default",
      "line": {
        "start": 78,
        "end": 78
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    }
  },
  {
    "description": "Form control border width when in error state\n\n",
    "commentRange": {
      "start": 80,
      "end": 83
    },
    "context": {
      "type": "variable",
      "name": "govuk-border-width-form-element-error",
      "value": "4px",
      "scope": "default",
      "line": {
        "start": 85,
        "end": 85
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    }
  },
  {
    "description": "Form group border width when in error state\n\n",
    "commentRange": {
      "start": 87,
      "end": 90
    },
    "context": {
      "type": "variable",
      "name": "govuk-border-width-form-group-error",
      "value": "$govuk-border-width",
      "scope": "default",
      "line": {
        "start": 92,
        "end": 92
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    }
  },
  {
    "description": "Border width of focus outline\n\n",
    "commentRange": {
      "start": 94,
      "end": 97
    },
    "context": {
      "type": "variable",
      "name": "govuk-focus-width",
      "value": "3px",
      "scope": "default",
      "line": {
        "start": 99,
        "end": 99
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    },
    "usedBy": [
      {
        "description": "Focused text\n\nProvides an outline to clearly indicate when the target element is focused.\nUsed for interactive text-based elements.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-focused-text",
          "code": "\n  // When colours are overridden, for example when users have a dark mode,\n  // backgrounds and box-shadows disappear, so we need to ensure there's a\n  // transparent outline which will be set to a visible colour.\n\n  // Since Internet Explorer 8 does not support box-shadow, we want to force the\n  // user-agent outlines\n  @include govuk-not-ie8 {\n    outline: $govuk-focus-width solid transparent;\n  }\n  color: $govuk-focus-text-colour;\n  background-color: $govuk-focus-colour;\n  box-shadow: 0 -2px $govuk-focus-colour, 0 4px $govuk-focus-text-colour;\n  // When link is focussed, hide the default underline since the\n  // box shadow adds the \"underline\"\n  text-decoration: none;\n",
          "line": {
            "start": 12,
            "end": 28
          }
        }
      }
    ]
  },
  {
    "description": "Hover width for form controls with a hover state\n\n",
    "commentRange": {
      "start": 101,
      "end": 104
    },
    "context": {
      "type": "variable",
      "name": "govuk-hover-width",
      "value": "10px",
      "scope": "default",
      "line": {
        "start": 106,
        "end": 106
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/measurements"
    ],
    "file": {
      "path": "settings/_measurements.scss",
      "name": "_measurements.scss"
    }
  },
  {
    "description": "Breakpoint definitions\n\n",
    "commentRange": {
      "start": 5,
      "end": 8
    },
    "context": {
      "type": "variable",
      "name": "govuk-breakpoints",
      "value": "(\n  mobile:  320px,\n  tablet:  641px,\n  desktop: 769px\n)",
      "scope": "default",
      "line": {
        "start": 10,
        "end": 14
      }
    },
    "type": "Map",
    "access": "public",
    "group": [
      "settings/media-queries"
    ],
    "file": {
      "path": "settings/_media-queries.scss",
      "name": "_media-queries.scss"
    }
  },
  {
    "description": "Show active breakpoint in top-right corner.\n\nOnly use this during local development.\n\n",
    "commentRange": {
      "start": 16,
      "end": 21
    },
    "context": {
      "type": "variable",
      "name": "govuk-show-breakpoints",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 23,
        "end": 23
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/media-queries"
    ],
    "file": {
      "path": "settings/_media-queries.scss",
      "name": "_media-queries.scss"
    }
  },
  {
    "description": "Single point spacing variables. Access using `govuk-spacing()`\n(see `helpers/spacing`).\n\n",
    "commentRange": {
      "start": 5,
      "end": 9
    },
    "context": {
      "type": "variable",
      "name": "govuk-spacing-points",
      "value": "(\n  0: 0,\n  1: 5px,\n  2: 10px,\n  3: 15px,\n  4: 20px,\n  5: 25px,\n  6: 30px,\n  7: 40px,\n  8: 50px,\n  9: 60px\n)",
      "scope": "default",
      "line": {
        "start": 11,
        "end": 22
      }
    },
    "type": "Map",
    "access": "private",
    "group": [
      "settings/spacing"
    ],
    "file": {
      "path": "settings/_spacing.scss",
      "name": "_spacing.scss"
    },
    "usedBy": [
      {
        "description": "Single point spacing\n\nReturns measurement corresponding to the spacing point requested.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-spacing",
          "code": "\n\n  $actual-input-type: type-of($spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-points, $spacing-point) {\n    @error \"Unknown spacing variable `#{$spacing-point}`. Make sure you are using a point from the spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  @return map-get($govuk-spacing-points, $spacing-point);\n",
          "line": {
            "start": 20,
            "end": 33
          }
        }
      },
      {
        "description": "Single point spacing\n\nReturns measurement corresponding to the spacing point requested.\n\n",
        "context": {
          "type": "function",
          "name": "govuk-spacing",
          "code": "\n\n  $actual-input-type: type-of($spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-points, $spacing-point) {\n    @error \"Unknown spacing variable `#{$spacing-point}`. Make sure you are using a point from the spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  @return map-get($govuk-spacing-points, $spacing-point);\n",
          "line": {
            "start": 20,
            "end": 33
          }
        }
      }
    ]
  },
  {
    "description": "Responsive spacing maps\n\nThese definitions are used to generate responsive spacing that adapts\naccording to the breakpoints (see 'helpers/spacing'). These maps should be\nused wherever possible to standardise responsive spacing.\n\nYou can define different behaviour on tablet and desktop. The 'null'\nbreakpoint is for mobile.\n\nAccess responsive spacing with `govuk-responsive-margin` or\n`govuk-responsive-padding` mixins (see `helpers/spacing`).\n\n",
    "commentRange": {
      "start": 24,
      "end": 37
    },
    "context": {
      "type": "variable",
      "name": "govuk-spacing-responsive-scale",
      "value": "(\n  0: (\n    null: 0,\n    tablet: 0\n  ),\n  1: (\n    null: 5px,\n    tablet: 5px\n  ),\n  2: (\n    null: 10px,\n    tablet: 10px\n  ),\n  3: (\n    null: 15px,\n    tablet: 15px\n  ),\n  4: (\n    null: 15px,\n    tablet: 20px\n  ),\n  5: (\n    null: 15px,\n    tablet: 25px\n  ),\n  6: (\n    null: 20px,\n    tablet: 30px\n  ),\n  7: (\n    null: 25px,\n    tablet: 40px\n  ),\n  8: (\n    null: 30px,\n    tablet: 50px\n  ),\n  9: (\n    null: 40px,\n    tablet: 60px\n  )\n)",
      "scope": "default",
      "line": {
        "start": 39,
        "end": 80
      }
    },
    "type": "Map",
    "access": "private",
    "group": [
      "settings/spacing"
    ],
    "file": {
      "path": "settings/_spacing.scss",
      "name": "_spacing.scss"
    },
    "usedBy": [
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      },
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      },
      {
        "description": "Spacing override classes\n\nGenerate spacing override classes for the given property (e.g. margin)\nfor each point in the spacing scale.\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-generate-spacing-overrides",
          "code": "\n  // For each point in the spacing scale (defined in settings), create an\n  // override that affects all directions...\n  @each $scale-point, $scale-map in $govuk-spacing-responsive-scale {\n\n    .govuk-\\!-#{$property}-#{$scale-point} {\n\n      @include _govuk-responsive-spacing($scale-point, $property, \"all\", true);\n    }\n\n    // ... and then an override for each individual direction\n    @each $direction in $_spacing-directions {\n\n      .govuk-\\!-#{$property}-#{$direction}-#{$scale-point} {\n        @include _govuk-responsive-spacing($scale-point, $property, $direction, true);\n      }\n    }\n  }\n",
          "line": {
            "start": 39,
            "end": 57
          }
        }
      }
    ]
  },
  {
    "description": "List of font families to use if using GDS Transport (the default font\n'stack' for GOV.UK)\n\n",
    "commentRange": {
      "start": 5,
      "end": 9
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-family-gds-transport",
      "value": "\"GDS Transport\", Arial, sans-serif",
      "scope": "private",
      "line": {
        "start": 11,
        "end": 11
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font-families.scss",
      "name": "_typography-font-families.scss"
    }
  },
  {
    "description": "List of font families to use if using NTA (old font 'stack' for\nGOV.UK)\n\n",
    "commentRange": {
      "start": 13,
      "end": 18
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-family-nta",
      "value": "\"nta\", Arial, sans-serif",
      "scope": "private",
      "line": {
        "start": 20,
        "end": 20
      }
    },
    "type": "List",
    "access": "public",
    "deprecated": "To be removed once support for compatibility mode is dropped",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font-families.scss",
      "name": "_typography-font-families.scss"
    }
  },
  {
    "description": "List of font families to use if using the 'tabular numbers' subset of NTA\n(the default font 'stack' for GOV.UK)\n\nBecause ntatabularnumbers only includes the digits 0-10, all other glyphs\nwill 'fall-through' the stack to NTA.\n\n",
    "commentRange": {
      "start": 22,
      "end": 30
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-family-nta-tabular",
      "value": "\"ntatabularnumbers\", $govuk-font-family-nta",
      "scope": "private",
      "line": {
        "start": 32,
        "end": 32
      }
    },
    "type": "List",
    "access": "public",
    "deprecated": "To be removed once support for compatibility mode is dropped",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font-families.scss",
      "name": "_typography-font-families.scss"
    }
  },
  {
    "description": "Use 'legacy' fonts\n\nWhether or not to use v1 nta font from GOV.UK Elements / Frontend\nToolkit, for teams that are migrating to GOV.UK Frontend and may be using\ncomponents from both places in a single application.\n\n",
    "commentRange": {
      "start": 8,
      "end": 15
    },
    "context": {
      "type": "variable",
      "name": "govuk-use-legacy-font",
      "value": "if((\n    $govuk-compatibility-govukfrontendtoolkit or\n    $govuk-compatibility-govuktemplate or\n    $govuk-compatibility-govukelements\n  ), true, false)",
      "scope": "default",
      "line": {
        "start": 17,
        "end": 21
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font.scss",
      "name": "_typography-font.scss"
    }
  },
  {
    "description": "Font families to use for all typography on screen media\n\n",
    "commentRange": {
      "start": 27,
      "end": 30
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-family",
      "value": "if($govuk-use-legacy-font,\n  $govuk-font-family-nta,\n  $govuk-font-family-gds-transport\n)",
      "scope": "default",
      "line": {
        "start": 32,
        "end": 35
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font.scss",
      "name": "_typography-font.scss"
    }
  },
  {
    "description": "Font families to use when displaying tabular numbers\n\n",
    "commentRange": {
      "start": 37,
      "end": 40
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-family-tabular",
      "value": "if($govuk-use-legacy-font,\n  $govuk-font-family-nta-tabular,\n  false\n)",
      "scope": "default",
      "line": {
        "start": 42,
        "end": 45
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font.scss",
      "name": "_typography-font.scss"
    },
    "usedBy": [
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      },
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      },
      {
        "description": "Font helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-font",
          "code": "\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports(font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n",
          "line": {
            "start": 177,
            "end": 206
          }
        }
      }
    ]
  },
  {
    "description": "Font families to use for print media\n\n",
    "commentRange": {
      "start": 47,
      "end": 50
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-family-print",
      "value": "sans-serif",
      "scope": "default",
      "line": {
        "start": 52,
        "end": 52
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font.scss",
      "name": "_typography-font.scss"
    },
    "usedBy": [
      {
        "description": "'Common typography' helper\n\nSets the font family and associated properties, such as font smoothing. Also\noverrides the font for print.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-common",
          "code": "\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If the user is using the default GDS Transport font we need to include\n  // the font-face declarations.\n  //\n  // We do not need to include the GDS Transport font-face declarations if\n  // alphagov/govuk_template is being used since nta will already be included by\n  // default.\n  @if ($govuk-include-default-font-face) {\n    @include _govuk-font-face-gds-transport;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n",
          "line": {
            "start": 15,
            "end": 33
          }
        }
      }
    ]
  },
  {
    "description": "Include the default @font-face declarations\n\nIf you have set $govuk-font-family to something other than\n`$govuk-font-family-gds-transport` this option is disabled by default.\n\n",
    "commentRange": {
      "start": 54,
      "end": 60
    },
    "context": {
      "type": "variable",
      "name": "govuk-include-default-font-face",
      "value": "(\n  $govuk-font-family == $govuk-font-family-gds-transport\n )",
      "scope": "default",
      "line": {
        "start": 62,
        "end": 64
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font.scss",
      "name": "_typography-font.scss"
    },
    "usedBy": [
      {
        "description": "'Common typography' helper\n\nSets the font family and associated properties, such as font smoothing. Also\noverrides the font for print.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-common",
          "code": "\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If the user is using the default GDS Transport font we need to include\n  // the font-face declarations.\n  //\n  // We do not need to include the GDS Transport font-face declarations if\n  // alphagov/govuk_template is being used since nta will already be included by\n  // default.\n  @if ($govuk-include-default-font-face) {\n    @include _govuk-font-face-gds-transport;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n",
          "line": {
            "start": 15,
            "end": 33
          }
        }
      }
    ]
  },
  {
    "description": "Font weight for regular typography\n\n",
    "commentRange": {
      "start": 70,
      "end": 73
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-weight-regular",
      "value": "400",
      "scope": "default",
      "line": {
        "start": 74,
        "end": 74
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font.scss",
      "name": "_typography-font.scss"
    },
    "usedBy": [
      {
        "description": "Regular font weight helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-weight-regular",
          "code": "\n  font-weight: $govuk-font-weight-regular iff($important, !important);\n",
          "line": {
            "start": 55,
            "end": 57
          }
        }
      }
    ]
  },
  {
    "description": "Font weight for bold typography\n\n",
    "commentRange": {
      "start": 76,
      "end": 79
    },
    "context": {
      "type": "variable",
      "name": "govuk-font-weight-bold",
      "value": "700",
      "scope": "default",
      "line": {
        "start": 80,
        "end": 80
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-font.scss",
      "name": "_typography-font.scss"
    },
    "usedBy": [
      {
        "description": "Bold font weight helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-weight-bold",
          "code": "\n  font-weight: $govuk-font-weight-bold iff($important, !important);\n",
          "line": {
            "start": 65,
            "end": 67
          }
        }
      }
    ]
  },
  {
    "description": "Whether or not to define font sizes in rem, improving accessibility by\nallowing users to adjust the base font-size. This is enabled by default,\nunless any of the compatibility mode settings are enabled.\n\nYou should make sure that $govuk-root-font-size is set correctly for your\nproject.\n\n",
    "commentRange": {
      "start": 7,
      "end": 15
    },
    "context": {
      "type": "variable",
      "name": "govuk-typography-use-rem",
      "value": "if((\n    $govuk-compatibility-govukfrontendtoolkit or\n    $govuk-compatibility-govuktemplate or\n    $govuk-compatibility-govukelements\n  ), false, true)",
      "scope": "default",
      "line": {
        "start": 17,
        "end": 21
      }
    },
    "type": "Boolean",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-responsive.scss",
      "name": "_typography-responsive.scss"
    },
    "usedBy": [
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      },
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      }
    ]
  },
  {
    "description": "Root font size\n\nThis is used to calculate rem sizes for the typography, and should match the\n_effective_ font-size of your root (or html) element.\n\nIdeally you should not be setting the font-size on the html or root element\nin order to allow it to scale with user-preference, in which case this\nshould be set to 16px.\n\nIf you are integrating Frontend into an existing project that also uses\nalphagov/govuk_template and you wish to enable `$govuk-typography-use-rem`\nthen you should set this to 10px to match the 62.5% (10px) base font size\nthat govuk_template sets on the <html> element.\n\n",
    "commentRange": {
      "start": 23,
      "end": 38
    },
    "context": {
      "type": "variable",
      "name": "govuk-root-font-size",
      "value": "16px",
      "scope": "default",
      "line": {
        "start": 40,
        "end": 40
      }
    },
    "type": "Number",
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-responsive.scss",
      "name": "_typography-responsive.scss"
    },
    "usedBy": [
      {
        "description": "Convert pixels to rem\n\nThe $govuk-root-font-size (defined in settings/_typography-responsive.scss)\nmust be configured to match the font-size of your root (html) element\n\n",
        "context": {
          "type": "function",
          "name": "govuk-px-to-rem",
          "code": "\n  @if (unitless($value)) {\n    $value: $value * 1px;\n  }\n\n  @return $value / $govuk-root-font-size * 1rem;\n",
          "line": {
            "start": 14,
            "end": 20
          }
        }
      }
    ]
  },
  {
    "description": "Responsive typography font map\n\nThis is used to generate responsive typography that adapts according to the\nbreakpoints.\n\nFont size and font weight can be defined for each breakpoint. You can define\ndifferent behaviour on tablet and desktop. The 'null' breakpoint is for\nmobile.\n\nLine-heights will automatically be converted from pixel measurements into\nrelative values. For example, with a font-size of 16px and a line-height of\n24px, the line-height will be converted to 1.5 before output.\n\nYou can also specify a separate font size and line height for print media.\n\n",
    "commentRange": {
      "start": 42,
      "end": 64
    },
    "context": {
      "type": "variable",
      "name": "govuk-typography-scale",
      "value": "(\n  80: (\n    null: (\n      font-size: 53px,\n      line-height: 55px\n    ),\n    tablet: (\n      font-size: 80px,\n      line-height: 80px\n    ),\n    print: (\n      font-size: 53pt,\n      line-height: 1.1\n    )\n  ),\n  48: (\n    null: (\n      font-size: 32px,\n      line-height: 35px\n    ),\n    tablet: (\n      font-size: 48px,\n      line-height: 50px\n    ),\n    print: (\n      font-size: 32pt,\n      line-height: 1.15\n    )\n  ),\n  36: (\n    null: (\n      font-size: 24px,\n      line-height: 25px\n    ),\n    tablet: (\n      font-size: 36px,\n      line-height: 40px\n    ),\n    print: (\n      font-size: 24pt,\n      line-height: 1.05\n    )\n  ),\n  27: (\n    null: (\n      font-size: 18px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 27px,\n      line-height: 30px\n    ),\n    print: (\n      font-size: 18pt,\n      line-height: 1.15\n    )\n  ),\n  24: (\n    null: (\n      font-size: 18px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 24px,\n      line-height: 30px\n    ),\n    print: (\n      font-size: 18pt,\n      line-height: 1.15\n    )\n  ),\n  19: (\n    null: (\n      font-size: 16px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 19px,\n      line-height: 25px\n    ),\n    print: (\n      font-size: 14pt,\n      line-height: 1.15\n    )\n  ),\n  16: (\n    null: (\n      font-size: 14px,\n      line-height: 16px\n    ),\n    tablet: (\n      font-size: 16px,\n      line-height: 20px\n    ),\n    print: (\n      font-size: 14pt,\n      line-height: 1.2\n    )\n  ),\n  14: (\n    null: (\n      font-size: 12px,\n      line-height: 15px\n    ),\n    tablet: (\n      font-size: 14px,\n      line-height: 20px\n    ),\n    print: (\n      font-size: 12pt,\n      line-height: 1.2\n    )\n  )\n)",
      "scope": "default",
      "line": {
        "start": 66,
        "end": 179
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$point.$breakpoint.font-size",
        "description": "Font size for `$point` at `$breakpoint`"
      },
      {
        "type": "Number",
        "name": "$point.$breakpoint.line-height",
        "description": "Line height for `$point` at `$breakpoint`"
      },
      {
        "type": "Number",
        "name": "$point.print.font-size",
        "description": "Font size for `$point` when printing"
      },
      {
        "type": "Number",
        "name": "$point.print.line-height",
        "description": "Line height for `$point` when printing"
      }
    ],
    "access": "public",
    "group": [
      "settings/typography"
    ],
    "file": {
      "path": "settings/_typography-responsive.scss",
      "name": "_typography-responsive.scss"
    },
    "usedBy": [
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      },
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      }
    ]
  },
  {
    "description": "Conditional Compatibility Mixin\n\nSelectively output a block (available to the mixin as @content) if a given\n$product is also identified as being used in the project.\n\nThis can then be used to include styles that are only needed to override\nstyles provided by those other products (e.g. where govuk_template has a\nvery specific link selector that otherwise affects buttons).\n\n",
    "commentRange": {
      "start": 5,
      "end": 26
    },
    "context": {
      "type": "mixin",
      "name": "govuk-compatibility",
      "code": "\n  @if map-has-key($_govuk-compatibility, $product) {\n    @if map-get($_govuk-compatibility, $product) == true {\n      @content;\n    }\n  } @else {\n    @error \"Non existent product '#{$product}'\";\n  }\n",
      "line": {
        "start": 28,
        "end": 36
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "// Override .my-class if GOV.UK Template is also being used\n@include govuk-compatibility(govuk_template) {\n  .my-class {\n    color: inherit;\n  }\n}"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "product",
        "description": "Name of product that we are 'defending' against."
      }
    ],
    "content": "Passed content is outputted only if Frontend is being used with\n  this product",
    "throw": [
      "Non existent product "
    ],
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [
      {
        "type": "variable",
        "name": "_govuk-compatibility"
      },
      {
        "type": "variable",
        "name": "_govuk-compatibility"
      }
    ],
    "file": {
      "path": "tools/_compatibility.scss",
      "name": "_compatibility.scss"
    },
    "usedBy": [
      {
        "description": "Default link style mixin\n\nProvides the default unvisited, visited, hover and active states for links.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-default",
          "code": "\n  &:link {\n    color: $govuk-link-colour;\n  }\n\n  &:visited {\n    color: $govuk-link-visited-colour;\n  }\n\n  &:hover {\n    color: $govuk-link-hover-colour;\n  }\n\n  &:active {\n    color: $govuk-link-active-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector\n  // designed to make unvisited link  s a slightly darker blue when focussed, so\n  // we need to override the text colour for that combination of selectors so\n  // so that unvisited links styled as buttons do not end up with dark blue\n  // text when focussed.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      color: $govuk-focus-text-colour;\n    }\n  }\n",
          "line": {
            "start": 34,
            "end": 67
          }
        }
      },
      {
        "description": "Muted style link mixin\n\nUsed for secondary links on a page - the link will appear in muted colours\nregardless of visited state.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-muted",
          "code": "\n  &:link,\n  &:visited,\n  &:hover,\n  &:active {\n    color: $govuk-secondary-text-colour;\n  }\n\n  // When focussed, the text colour needs to be darker to ensure that colour\n  // contrast is still acceptable\n  &:focus {\n    color: $govuk-focus-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
          "line": {
            "start": 85,
            "end": 107
          }
        }
      },
      {
        "description": "Text style link mixin\n\nOverrides the colour of links to match the text colour. Generally used by\nnavigation components, such as breadcrumbs or the back link.\n\nIf you use this mixin in a component you must also include the\ngovuk-link-common mixin in order to get the focus state.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-link-style-text",
          "code": "\n  // Override link colour to use text colour\n  &:link,\n  &:visited,\n  &:hover,\n  &:active,\n  &:focus {\n    @include govuk-text-colour;\n  }\n\n  // alphagov/govuk_template includes a specific a:link:focus selector designed\n  // to make unvisited links a slightly darker blue when focussed, so we need to\n  // override the text colour for that combination of selectors.\n  @include govuk-compatibility(govuk_template) {\n    &:link:focus {\n      @include govuk-text-colour;\n    }\n  }\n",
          "line": {
            "start": 125,
            "end": 143
          }
        }
      }
    ]
  },
  {
    "description": "List of modules which have already been exported\n\n",
    "commentRange": {
      "start": 5,
      "end": 8
    },
    "context": {
      "type": "variable",
      "name": "_govuk-imported-modules",
      "value": "()",
      "scope": "default",
      "line": {
        "start": 10,
        "end": 10
      }
    },
    "type": "List",
    "access": "private",
    "group": [
      "tools"
    ],
    "file": {
      "path": "tools/_exports.scss",
      "name": "_exports.scss"
    },
    "usedBy": [
      {
        "description": "Export module\n\nEnsure that the modules of CSS that we define throughout Frontend are only\nincluded in the generated CSS once, no matter how many times they are\nimported across the individual components.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-exports",
          "code": "\n  // If the mixin is not in the list of modules already exported...\n  @if (index($_govuk-imported-modules, $name) == null) {\n    // ... then add it to the list\n    $_govuk-imported-modules: append($_govuk-imported-modules, $name) !global;\n    // ... and output the CSS for that module\n    @content;\n  }\n  // The next time exports is called for the module of the same name, it will be\n  // found in the list and so nothing will be outputted.\n",
          "line": {
            "start": 23,
            "end": 33
          }
        }
      },
      {
        "description": "Export module\n\nEnsure that the modules of CSS that we define throughout Frontend are only\nincluded in the generated CSS once, no matter how many times they are\nimported across the individual components.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-exports",
          "code": "\n  // If the mixin is not in the list of modules already exported...\n  @if (index($_govuk-imported-modules, $name) == null) {\n    // ... then add it to the list\n    $_govuk-imported-modules: append($_govuk-imported-modules, $name) !global;\n    // ... and output the CSS for that module\n    @content;\n  }\n  // The next time exports is called for the module of the same name, it will be\n  // found in the list and so nothing will be outputted.\n",
          "line": {
            "start": 23,
            "end": 33
          }
        }
      },
      {
        "description": "Export module\n\nEnsure that the modules of CSS that we define throughout Frontend are only\nincluded in the generated CSS once, no matter how many times they are\nimported across the individual components.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-exports",
          "code": "\n  // If the mixin is not in the list of modules already exported...\n  @if (index($_govuk-imported-modules, $name) == null) {\n    // ... then add it to the list\n    $_govuk-imported-modules: append($_govuk-imported-modules, $name) !global;\n    // ... and output the CSS for that module\n    @content;\n  }\n  // The next time exports is called for the module of the same name, it will be\n  // found in the list and so nothing will be outputted.\n",
          "line": {
            "start": 23,
            "end": 33
          }
        }
      }
    ]
  },
  {
    "description": "Export module\n\nEnsure that the modules of CSS that we define throughout Frontend are only\nincluded in the generated CSS once, no matter how many times they are\nimported across the individual components.\n\n",
    "commentRange": {
      "start": 12,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "govuk-exports",
      "code": "\n  // If the mixin is not in the list of modules already exported...\n  @if (index($_govuk-imported-modules, $name) == null) {\n    // ... then add it to the list\n    $_govuk-imported-modules: append($_govuk-imported-modules, $name) !global;\n    // ... and output the CSS for that module\n    @content;\n  }\n  // The next time exports is called for the module of the same name, it will be\n  // found in the list and so nothing will be outputted.\n",
      "line": {
        "start": 23,
        "end": 33
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of module - must be unique within the codebase"
      }
    ],
    "content": "The passed content will only be outputted if a module of the same\n  $name has not already been outputted",
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [
      {
        "type": "variable",
        "name": "_govuk-imported-modules"
      },
      {
        "type": "variable",
        "name": "_govuk-imported-modules"
      },
      {
        "type": "variable",
        "name": "_govuk-imported-modules"
      }
    ],
    "file": {
      "path": "tools/_exports.scss",
      "name": "_exports.scss"
    }
  },
  {
    "description": "Font URL\n\nIf a custom font-url handler is defined ($govuk-font-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the font path.\n\n",
    "commentRange": {
      "start": 8,
      "end": 16
    },
    "context": {
      "type": "function",
      "name": "govuk-font-url",
      "code": "\n  $use-custom-function: variable-exists(\"govuk-font-url-function\")\n    and $govuk-font-url-function\n    and function-exists($govuk-font-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-font-url-function), $filename);\n  } @else {\n    @return url($govuk-fonts-path + $filename);\n  }\n",
      "line": {
        "start": 18,
        "end": 28
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "filename",
        "description": "Font filename"
      }
    ],
    "return": {
      "type": "String",
      "description": "URL for the filename, wrapped in `url()`"
    },
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-font-url-function"
      },
      {
        "type": "variable",
        "name": "govuk-font-url-function"
      },
      {
        "type": "variable",
        "name": "govuk-font-url-function"
      },
      {
        "type": "variable",
        "name": "govuk-fonts-path"
      }
    ],
    "file": {
      "path": "tools/_font-url.scss",
      "name": "_font-url.scss"
    },
    "usedBy": [
      {
        "description": "Font Face - GDS Transport\n\nOutputs the font-face declaration for GDS Transport at the root of the CSS document\nthe first time it is called.\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-font-face-gds-transport",
          "code": "\n  @include govuk-not-ie8 { // In IE8, which cannot render WOFF format, we fall back to system fonts\n    @include govuk-exports(\"govuk/helpers/font-faces\") {\n      @at-root {\n        /*! Copyright (c) 2011 by Margaret Calvert & Henrik Kubel. All rights reserved. The font has been customised for exclusive use on gov.uk. This cut is not commercially available. */\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"light-94a07e06a1-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"light-f591b13f7d-v2.woff\") format(\"woff\");\n          font-weight: normal;\n          font-style: normal;\n          font-display: fallback;\n        }\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"bold-b542beb274-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"bold-affa96571d-v2.woff\") format(\"woff\");\n          font-weight: bold;\n          font-style: normal;\n          font-display: fallback;\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 17,
            "end": 43
          }
        }
      },
      {
        "description": "Font Face - GDS Transport\n\nOutputs the font-face declaration for GDS Transport at the root of the CSS document\nthe first time it is called.\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-font-face-gds-transport",
          "code": "\n  @include govuk-not-ie8 { // In IE8, which cannot render WOFF format, we fall back to system fonts\n    @include govuk-exports(\"govuk/helpers/font-faces\") {\n      @at-root {\n        /*! Copyright (c) 2011 by Margaret Calvert & Henrik Kubel. All rights reserved. The font has been customised for exclusive use on gov.uk. This cut is not commercially available. */\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"light-94a07e06a1-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"light-f591b13f7d-v2.woff\") format(\"woff\");\n          font-weight: normal;\n          font-style: normal;\n          font-display: fallback;\n        }\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"bold-b542beb274-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"bold-affa96571d-v2.woff\") format(\"woff\");\n          font-weight: bold;\n          font-style: normal;\n          font-display: fallback;\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 17,
            "end": 43
          }
        }
      },
      {
        "description": "Font Face - GDS Transport\n\nOutputs the font-face declaration for GDS Transport at the root of the CSS document\nthe first time it is called.\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-font-face-gds-transport",
          "code": "\n  @include govuk-not-ie8 { // In IE8, which cannot render WOFF format, we fall back to system fonts\n    @include govuk-exports(\"govuk/helpers/font-faces\") {\n      @at-root {\n        /*! Copyright (c) 2011 by Margaret Calvert & Henrik Kubel. All rights reserved. The font has been customised for exclusive use on gov.uk. This cut is not commercially available. */\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"light-94a07e06a1-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"light-f591b13f7d-v2.woff\") format(\"woff\");\n          font-weight: normal;\n          font-style: normal;\n          font-display: fallback;\n        }\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"bold-b542beb274-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"bold-affa96571d-v2.woff\") format(\"woff\");\n          font-weight: bold;\n          font-style: normal;\n          font-display: fallback;\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 17,
            "end": 43
          }
        }
      },
      {
        "description": "Font Face - GDS Transport\n\nOutputs the font-face declaration for GDS Transport at the root of the CSS document\nthe first time it is called.\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-font-face-gds-transport",
          "code": "\n  @include govuk-not-ie8 { // In IE8, which cannot render WOFF format, we fall back to system fonts\n    @include govuk-exports(\"govuk/helpers/font-faces\") {\n      @at-root {\n        /*! Copyright (c) 2011 by Margaret Calvert & Henrik Kubel. All rights reserved. The font has been customised for exclusive use on gov.uk. This cut is not commercially available. */\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"light-94a07e06a1-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"light-f591b13f7d-v2.woff\") format(\"woff\");\n          font-weight: normal;\n          font-style: normal;\n          font-display: fallback;\n        }\n\n        @font-face {\n          font-family: \"GDS Transport\";\n          src: govuk-font-url(\"bold-b542beb274-v2.woff2\") format(\"woff2\"),\n               govuk-font-url(\"bold-affa96571d-v2.woff\") format(\"woff\");\n          font-weight: bold;\n          font-style: normal;\n          font-display: fallback;\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 17,
            "end": 43
          }
        }
      }
    ]
  },
  {
    "description": "Conditionally include rules only for IE8\n\n",
    "commentRange": {
      "start": 5,
      "end": 20
    },
    "context": {
      "type": "mixin",
      "name": "govuk-if-ie8",
      "code": "\n  @if $govuk-is-ie8 {\n    @content;\n  }\n",
      "line": {
        "start": 22,
        "end": 26
      }
    },
    "content": "Passed content is only outputted if we're compiling a stylesheet\n  that targets IE8 (if `$govuk-is-ie8` is true)",
    "example": [
      {
        "type": "scss",
        "code": ".foo {\n  min-width: 100px;\n  // Specify width for IE8 only\n  @include govuk-if-ie8 {\n    width: 100px;\n  }\n}",
        "description": "Usage"
      }
    ],
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-is-ie8"
      }
    ],
    "file": {
      "path": "tools/_ie8.scss",
      "name": "_ie8.scss"
    }
  },
  {
    "description": "Conditionally exclude rules for IE8\n\n",
    "commentRange": {
      "start": 28,
      "end": 45
    },
    "context": {
      "type": "mixin",
      "name": "govuk-not-ie8",
      "code": "\n  @if not $govuk-is-ie8 {\n    @content;\n  }\n",
      "line": {
        "start": 47,
        "end": 51
      }
    },
    "content": "Passed content is only outputted if we're not compiling a\n  stylesheet that targets IE8 (if `$govuk-is-ie8` is false)",
    "example": [
      {
        "type": "scss",
        "code": ".foo {\n  font-weight: bold;\n\n  // Enhance foo only for modern browsers (not IE8)\n  @include govuk-not-ie8 {\n    font-family: \"Comic Sans MS\", \"Curlz MT\" cursive, sans-serif;\n    color: #FF69B4;\n  }\n}",
        "description": "Usage"
      }
    ],
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-is-ie8"
      }
    ],
    "file": {
      "path": "tools/_ie8.scss",
      "name": "_ie8.scss"
    }
  },
  {
    "description": "Syntactic sugar around Sass' built-in `if` function that does not require\nyou to pass a value for `$if-false`.\n\n",
    "commentRange": {
      "start": 5,
      "end": 11
    },
    "context": {
      "type": "function",
      "name": "iff",
      "code": "\n  @return if($condition, $if-true, null);\n",
      "line": {
        "start": 13,
        "end": 15
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "condition",
        "description": "Whether to return the value of `$if-true`"
      },
      {
        "type": "Mixed",
        "name": "if-true",
        "description": "Value to return if `$condition` is truthy"
      }
    ],
    "return": {
      "type": "Mixed",
      "description": "Value of `$if-true` if `$condition` is truthy, else null"
    },
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [],
    "file": {
      "path": "tools/_iff.scss",
      "name": "_iff.scss"
    },
    "usedBy": [
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      },
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      },
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      },
      {
        "description": "Responsive spacing\n\nAdds responsive spacing (either padding or margin, depending on `$property`)\nby fetching a 'spacing map' from the responsive spacing scale, which defines\ndifferent spacing values at different breakpoints.\n\nTo generate responsive spacing, use 'govuk-responsive-margin' or\n'govuk-responsive-padding' mixins\n\n",
        "context": {
          "type": "mixin",
          "name": "_govuk-responsive-spacing",
          "code": "\n\n  $actual-input-type: type-of($responsive-spacing-point);\n  @if $actual-input-type != \"number\" {\n    @error \"Expected a number (integer), but got a \" + \"#{$actual-input-type}.\";\n  }\n\n  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {\n    @error \"Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the \"\n    + \"responsive spacing scale in `_settings/spacing.scss`.\";\n  }\n\n  // Make sure that the return value from `_settings/spacing.scss` is a map.\n  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);\n  $actual-map-type: type-of($scale-map);\n  @if $actual-map-type != \"map\" {\n    @error \"Expected a number (integer), but got a \"\n    + \"#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)\";\n  }\n\n  // Loop through each breakpoint in the map\n  @each $breakpoint, $breakpoint-value in $scale-map {\n\n    @if ($adjustment) {\n      $breakpoint-value: $breakpoint-value + $adjustment;\n    }\n\n    // The 'null' breakpoint is for mobile.\n    @if $breakpoint == null {\n\n      @if $direction == all {\n        #{$property}: $breakpoint-value iff($important, !important);\n      } @else {\n        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        @if $direction == all {\n          #{$property}: $breakpoint-value iff($important, !important);\n        } @else {\n          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 54,
            "end": 99
          }
        }
      },
      {
        "description": "Regular font weight helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-weight-regular",
          "code": "\n  font-weight: $govuk-font-weight-regular iff($important, !important);\n",
          "line": {
            "start": 55,
            "end": 57
          }
        }
      },
      {
        "description": "Bold font weight helper\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-weight-bold",
          "code": "\n  font-weight: $govuk-font-weight-bold iff($important, !important);\n",
          "line": {
            "start": 65,
            "end": 67
          }
        }
      },
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      },
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      },
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n  padding: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  border: 0 iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n",
          "line": {
            "start": 16,
            "end": 37
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      },
      {
        "description": "Hide an element visually, but have it available for screen readers whilst\nallowing the element to be focused when navigated to via the keyboard (e.g.\nfor the skip link)\n\nThis is slightly less opinionated about borders and padding to make it\neasier to style the focussed element.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-visually-hidden-focusable",
          "code": "\n  position: absolute iff($important, !important);\n\n  width: 1px iff($important, !important);\n  height: 1px iff($important, !important);\n  // If margin is set to a negative value it can cause text to be announced in\n  // the wrong order in VoiceOver for OSX\n  margin: 0 iff($important, !important);\n\n  overflow: hidden iff($important, !important);\n  clip: rect(0 0 0 0) iff($important, !important);\n  -webkit-clip-path: inset(50%) iff($important, !important);\n          clip-path: inset(50%) iff($important, !important);\n\n  // For long content, line feeds are not interpreted as spaces and small width\n  // causes content to wrap 1 word per line:\n  // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n  white-space: nowrap iff($important, !important);\n\n  &:active,\n  &:focus {\n    position: static iff($important, !important);\n\n    width: auto iff($important, !important);\n    height: auto iff($important, !important);\n    margin: inherit iff($important, !important);\n\n    overflow: visible iff($important, !important);\n    clip: auto iff($important, !important);\n    -webkit-clip-path: none iff($important, !important);\n            clip-path: none iff($important, !important);\n\n    white-space: inherit iff($important, !important);\n  }\n",
          "line": {
            "start": 50,
            "end": 84
          }
        }
      }
    ]
  },
  {
    "description": "Image URL\n\nIf a custom image-url handler is defined ($govuk-image-url-function) then\nit will be called, otherwise a url will be returned with the filename\nappended to the image path.\n\n",
    "commentRange": {
      "start": 8,
      "end": 16
    },
    "context": {
      "type": "function",
      "name": "govuk-image-url",
      "code": "\n  $use-custom-function: variable-exists(\"govuk-image-url-function\")\n    and $govuk-image-url-function\n    and function-exists($govuk-image-url-function);\n\n  @if ($use-custom-function) {\n    @return call(get-function($govuk-image-url-function), $filename);\n  } @else {\n    @return url($govuk-images-path + $filename);\n  }\n",
      "line": {
        "start": 18,
        "end": 28
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "Filename",
        "description": "for the image to load"
      }
    ],
    "return": {
      "type": "String",
      "description": "URL for the filename, wrapped in `url()`"
    },
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-image-url-function"
      },
      {
        "type": "variable",
        "name": "govuk-image-url-function"
      },
      {
        "type": "variable",
        "name": "govuk-image-url-function"
      },
      {
        "type": "variable",
        "name": "govuk-images-path"
      }
    ],
    "file": {
      "path": "tools/_image-url.scss",
      "name": "_image-url.scss"
    }
  },
  {
    "description": "Convert pixels to em\n\n",
    "commentRange": {
      "start": 5,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "govuk-em",
      "code": "\n  @if (unitless($value)) {\n    $value: $value * 1px;\n  }\n  @if (unitless($context-font-size)) {\n    $context-font-size: $context-font-size * 1px;\n  }\n  @return $value / $context-font-size * 1em;\n",
      "line": {
        "start": 12,
        "end": 20
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "value",
        "description": "Length in pixels"
      },
      {
        "type": "Number",
        "name": "context-font-size",
        "description": "Font size of element"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Length in ems"
    },
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [],
    "file": {
      "path": "tools/_px-to-em.scss",
      "name": "_px-to-em.scss"
    }
  },
  {
    "description": "Convert pixels to rem\n\nThe $govuk-root-font-size (defined in settings/_typography-responsive.scss)\nmust be configured to match the font-size of your root (html) element\n\n",
    "commentRange": {
      "start": 5,
      "end": 12
    },
    "context": {
      "type": "function",
      "name": "govuk-px-to-rem",
      "code": "\n  @if (unitless($value)) {\n    $value: $value * 1px;\n  }\n\n  @return $value / $govuk-root-font-size * 1rem;\n",
      "line": {
        "start": 14,
        "end": 20
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "value",
        "description": "Length in pixels"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Length in rems"
    },
    "access": "public",
    "group": [
      "tools"
    ],
    "require": [
      {
        "type": "variable",
        "name": "govuk-root-font-size"
      }
    ],
    "file": {
      "path": "tools/_px-to-rem.scss",
      "name": "_px-to-rem.scss"
    },
    "usedBy": [
      {
        "description": "Responsive typography helper\n\nTakes a 'font map' as an argument and uses it to create font-size and\nline-height declarations for different breakpoints, and for print.\n\nExample font map:\n\n$my-font-map: (\n  null: (\n    font-size: 16px,\n    line-height: 20px\n  ),\n  tablet: (\n    font-size: 19px,\n    line-height: 25px\n  ),\n  print: (\n    font-size: 14pt,\n    line-height: 1.15\n  )\n);\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-typography-responsive",
          "code": "\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if($override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size iff($important, !important);\n    $font-size-rem: $font-size-rem iff($important, !important);\n    $line-height: $line-height iff($important, !important);\n\n    @if $breakpoint == null {\n      font-size: $font-size; // sass-lint:disable no-duplicate-properties\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size; // sass-lint:disable no-duplicate-properties\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem; // sass-lint:disable no-duplicate-properties\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n",
          "line": {
            "start": 117,
            "end": 165
          }
        }
      }
    ]
  },
  {
    "description": "",
    "commentRange": {
      "start": 23,
      "end": 24
    },
    "context": {
      "type": "mixin",
      "name": "govuk-main-wrapper",
      "code": "\n  // In IE11 the `main` element can be used, but is not recognized  –\n  // meaning it's not defined in IE's default style sheet,\n  // so it uses CSS initial value, which is inline.\n  display: block;\n  padding-top: govuk-spacing(4);\n  padding-bottom: govuk-spacing(4);\n\n  @include govuk-media-query($from: tablet) {\n    // This spacing is manually adjusted to replicate the margin of\n    // govuk-heading-xl (50px) minus the spacing of back link and\n    // breadcrumbs (10px)\n    padding-top: govuk-spacing(7);\n    padding-bottom: govuk-spacing(7);\n  }\n",
      "line": {
        "start": 25,
        "end": 40
      }
    },
    "deprecated": "Replace this mixin with more direct references to the [spacing\nmixins](https://design-system.service.gov.uk/styles/spacing/#spacing-on-custom-components).",
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-media-query"
      },
      {
        "type": "function",
        "name": "govuk-spacing"
      },
      {
        "type": "function",
        "name": "govuk-spacing"
      },
      {
        "type": "function",
        "name": "govuk-spacing"
      },
      {
        "type": "function",
        "name": "govuk-spacing"
      }
    ],
    "file": {
      "path": "objects/_main-wrapper.scss",
      "name": "_main-wrapper.scss"
    }
  },
  {
    "description": "Use govuk-main-wrapper--l when you page does not have Breadcrumbs, phase\nbanners or back links.\n\n",
    "commentRange": {
      "start": 42,
      "end": 46
    },
    "context": {
      "type": "mixin",
      "name": "govuk-main-wrapper--l",
      "code": "\n  @include govuk-responsive-padding(8, \"top\");\n",
      "line": {
        "start": 47,
        "end": 49
      }
    },
    "deprecated": "Replace this mixin with more direct references to the [spacing\nmixins](https://design-system.service.gov.uk/styles/spacing/#spacing-on-custom-components).",
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "govuk-responsive-padding"
      }
    ],
    "file": {
      "path": "objects/_main-wrapper.scss",
      "name": "_main-wrapper.scss"
    }
  },
  {
    "description": "Base font size on the `<body>` element\n",
    "commentRange": {
      "start": 9,
      "end": 10
    },
    "context": {
      "type": "variable",
      "name": "mq-base-font-size",
      "value": "16px",
      "scope": "default",
      "line": {
        "start": 11,
        "end": 11
      }
    },
    "type": "Number (unit)",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Convert pixels to ems\n\n",
        "context": {
          "type": "function",
          "name": "mq-px2em",
          "code": "\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n",
          "line": {
            "start": 93,
            "end": 101
          }
        }
      }
    ]
  },
  {
    "description": "Responsive mode\n\nSet to `false` to enable support for browsers that do not support @media queries,\n(IE <= 8, Firefox <= 3, Opera <= 9)\n\nYou could create a stylesheet served exclusively to older browsers,\nwhere @media queries are rasterized\n\n",
    "commentRange": {
      "start": 13,
      "end": 28
    },
    "context": {
      "type": "variable",
      "name": "mq-responsive",
      "value": "true",
      "scope": "default",
      "line": {
        "start": 29,
        "end": 29
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "// old-ie.scss\n$mq-responsive: false;\n@import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n                 // larger breakpoints will be ignored"
      }
    ],
    "type": "Boolean",
    "link": [
      {
        "url": "https://github.com/sass-mq/sass-mq#responsive-mode-off",
        "caption": "Disabled responsive mode documentation"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    }
  },
  {
    "description": "Breakpoint list\n\nName your breakpoints in a way that creates a ubiquitous language\nacross team members. It will improve communication between\nstakeholders, designers, developers, and testers.\n\n",
    "commentRange": {
      "start": 31,
      "end": 38
    },
    "context": {
      "type": "variable",
      "name": "mq-breakpoints",
      "value": "(\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n)",
      "scope": "default",
      "line": {
        "start": 39,
        "end": 44
      }
    },
    "type": "Map",
    "link": [
      {
        "url": "https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint",
        "caption": "Full documentation and examples"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Get a breakpoint's width\n\n",
        "context": {
          "type": "function",
          "name": "mq-get-breakpoint-width",
          "code": "\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n",
          "line": {
            "start": 114,
            "end": 120
          }
        }
      },
      {
        "description": "Media Query mixin\n\n",
        "context": {
          "type": "mixin",
          "name": "mq",
          "code": "\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n",
          "line": {
            "start": 169,
            "end": 235
          }
        }
      },
      {
        "description": "Add a breakpoint\n\n",
        "context": {
          "type": "mixin",
          "name": "mq-add-breakpoint",
          "code": "\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n",
          "line": {
            "start": 302,
            "end": 306
          }
        }
      },
      {
        "description": "Show the active breakpoint in the top right corner of the viewport\n",
        "context": {
          "type": "mixin",
          "name": "mq-show-breakpoints",
          "code": "\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n",
          "line": {
            "start": 323,
            "end": 345
          }
        }
      }
    ]
  },
  {
    "description": "Static breakpoint (for fixed-width layouts)\n\nDefine the breakpoint from $mq-breakpoints that should\nbe used as the target width for the fixed-width layout\n(i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n\n",
    "commentRange": {
      "start": 46,
      "end": 63
    },
    "context": {
      "type": "variable",
      "name": "mq-static-breakpoint",
      "value": "desktop",
      "scope": "default",
      "line": {
        "start": 64,
        "end": 64
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "// tablet-only.scss\n//\n// Ignore all styles above tablet breakpoint,\n// and fix the styles (e.g. layout) at tablet width\n$mq-responsive: false;\n$mq-static-breakpoint: tablet;\n@import 'main'; // @media queries in this file will be rasterized up to tablet\n                 // larger breakpoints will be ignored"
      }
    ],
    "type": "String",
    "link": [
      {
        "url": "https://github.com/sass-mq/sass-mq#adding-custom-breakpoints",
        "caption": "Full documentation and examples"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Media Query mixin\n\n",
        "context": {
          "type": "mixin",
          "name": "mq",
          "code": "\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n",
          "line": {
            "start": 169,
            "end": 235
          }
        }
      }
    ]
  },
  {
    "description": "Show breakpoints in the top right corner\n\nIf you want to display the currently active breakpoint in the top\nright corner of your site during development, add the breakpoints\nto this list, ordered by width, e.g. (mobile, tablet, desktop).\n\n",
    "commentRange": {
      "start": 66,
      "end": 72
    },
    "context": {
      "type": "variable",
      "name": "mq-show-breakpoints",
      "value": "()",
      "scope": "default",
      "line": {
        "start": 73,
        "end": 73
      }
    },
    "type": "map",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Show the active breakpoint in the top right corner of the viewport\n",
        "context": {
          "type": "mixin",
          "name": "mq-show-breakpoints",
          "code": "\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n",
          "line": {
            "start": 323,
            "end": 345
          }
        }
      }
    ]
  },
  {
    "description": "Customize the media type (e.g. `@media screen` or `@media print`)\nBy default sass-mq uses an \"all\" media type (`@media all and …`)\n\n",
    "commentRange": {
      "start": 75,
      "end": 79
    },
    "context": {
      "type": "variable",
      "name": "mq-media-type",
      "value": "all",
      "scope": "default",
      "line": {
        "start": 80,
        "end": 80
      }
    },
    "type": "String",
    "link": [
      {
        "url": "https://github.com/sass-mq/sass-mq#changing-media-type",
        "caption": "Full documentation and examples"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Media Query mixin\n\n",
        "context": {
          "type": "mixin",
          "name": "mq",
          "code": "\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n",
          "line": {
            "start": 169,
            "end": 235
          }
        }
      }
    ]
  },
  {
    "description": "Convert pixels to ems\n\n",
    "commentRange": {
      "start": 82,
      "end": 92
    },
    "context": {
      "type": "function",
      "name": "mq-px2em",
      "code": "\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n",
      "line": {
        "start": 93,
        "end": 101
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "px",
        "description": "value to convert"
      },
      {
        "type": "Number",
        "name": "base-font-size",
        "description": "($mq-base-font-size) - `<body>` font size\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$font-size-in-ems: mq-px2em(16px);\np { font-size: mq-px2em(16px); }"
      }
    ],
    "require": [
      {
        "type": "variable",
        "name": "mq-base-font-size",
        "external": false
      }
    ],
    "return": {
      "type": "Number"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Media Query mixin\n\n",
        "context": {
          "type": "mixin",
          "name": "mq",
          "code": "\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n",
          "line": {
            "start": 169,
            "end": 235
          }
        }
      },
      {
        "description": "Show the active breakpoint in the top right corner of the viewport\n",
        "context": {
          "type": "mixin",
          "name": "mq-show-breakpoints",
          "code": "\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n",
          "line": {
            "start": 323,
            "end": 345
          }
        }
      }
    ]
  },
  {
    "description": "Get a breakpoint's width\n\n",
    "commentRange": {
      "start": 103,
      "end": 113
    },
    "context": {
      "type": "function",
      "name": "mq-get-breakpoint-width",
      "code": "\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n",
      "line": {
        "start": 114,
        "end": 120
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of the breakpoint. One of $mq-breakpoints\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$tablet-width: mq-get-breakpoint-width(tablet);\n@media (min-width: mq-get-breakpoint-width(desktop)) {}"
      }
    ],
    "require": [
      {
        "type": "variable",
        "name": "mq-breakpoints",
        "external": false
      }
    ],
    "return": {
      "type": "Number",
      "description": "Value in pixels"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Media Query mixin\n\n",
        "context": {
          "type": "mixin",
          "name": "mq",
          "code": "\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n",
          "line": {
            "start": 169,
            "end": 235
          }
        }
      },
      {
        "description": "Show the active breakpoint in the top right corner of the viewport\n",
        "context": {
          "type": "mixin",
          "name": "mq-show-breakpoints",
          "code": "\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n",
          "line": {
            "start": 323,
            "end": 345
          }
        }
      }
    ]
  },
  {
    "description": "Media Query mixin\n\n",
    "commentRange": {
      "start": 122,
      "end": 168
    },
    "context": {
      "type": "mixin",
      "name": "mq",
      "code": "\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n",
      "line": {
        "start": 169,
        "end": 235
      }
    },
    "parameter": [
      {
        "type": "String | Boolean",
        "name": "from",
        "description": "(false) - One of $mq-breakpoints"
      },
      {
        "type": "String | Boolean",
        "name": "until",
        "description": "(false) - One of $mq-breakpoints"
      },
      {
        "type": "String | Boolean",
        "name": "and",
        "description": "(false) - Additional media query parameters"
      },
      {
        "type": "String",
        "name": "media-type",
        "description": "($mq-media-type) - Media type: screen, print…\n"
      }
    ],
    "ignore": [],
    "content": "styling rules, wrapped into a @media query when $responsive is true",
    "require": [
      {
        "type": "variable",
        "name": "mq-media-type",
        "external": false
      },
      {
        "type": "variable",
        "name": "mq-breakpoints",
        "external": false
      },
      {
        "type": "variable",
        "name": "mq-static-breakpoint",
        "external": false
      },
      {
        "type": "function",
        "name": "mq-px2em",
        "external": false
      },
      {
        "type": "function",
        "name": "mq-get-breakpoint-width",
        "external": false
      }
    ],
    "link": [
      {
        "url": "https://github.com/sass-mq/sass-mq#responsive-mode-on-default",
        "caption": "Full documentation and examples"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include mq($from: mobile) {\n    color: red;\n  }\n  @include mq($until: tablet) {\n    color: blue;\n  }\n  @include mq(mobile, tablet) {\n    color: green;\n  }\n  @include mq($from: tablet, $and: '(orientation: landscape)') {\n    color: teal;\n  }\n  @include mq(950px) {\n    color: hotpink;\n  }\n  @include mq(tablet, $media-type: screen) {\n    color: hotpink;\n  }\n  // Advanced use:\n  $my-breakpoints: (L: 900px, XL: 1200px);\n  @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n    color: hotpink;\n  }\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Media Query\n\nThis is a currently a wrapper for sass-mq - abstracted so that we can\nreplace it in the future if we so choose.\n\n",
        "context": {
          "type": "mixin",
          "name": "govuk-media-query",
          "code": "\n  @include mq($args...) {\n    @content;\n  };\n",
          "line": {
            "start": 91,
            "end": 95
          }
        }
      },
      {
        "description": "Show the active breakpoint in the top right corner of the viewport\n",
        "context": {
          "type": "mixin",
          "name": "mq-show-breakpoints",
          "code": "\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n",
          "line": {
            "start": 323,
            "end": 345
          }
        }
      }
    ]
  },
  {
    "description": "Quick sort\n\n",
    "commentRange": {
      "start": 237,
      "end": 242
    },
    "context": {
      "type": "function",
      "name": "_mq-quick-sort",
      "code": "\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n",
      "line": {
        "start": 243,
        "end": 265
      }
    },
    "author": [
      "Sam Richards"
    ],
    "access": "private",
    "parameter": [
      {
        "type": "List",
        "name": "list",
        "description": "List to sort"
      }
    ],
    "return": {
      "type": "List",
      "description": "Sorted List"
    },
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Sort a map by values (works with numbers only)\n\n",
        "context": {
          "type": "function",
          "name": "_mq-map-sort-by-value",
          "code": "\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n",
          "line": {
            "start": 272,
            "end": 290
          }
        }
      }
    ]
  },
  {
    "description": "Sort a map by values (works with numbers only)\n\n",
    "commentRange": {
      "start": 267,
      "end": 271
    },
    "context": {
      "type": "function",
      "name": "_mq-map-sort-by-value",
      "code": "\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n",
      "line": {
        "start": 272,
        "end": 290
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "Map",
        "name": "map",
        "description": "Map to sort"
      }
    ],
    "return": {
      "type": "Map",
      "description": "Map sorted by value"
    },
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "_mq-quick-sort"
      }
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    },
    "usedBy": [
      {
        "description": "Add a breakpoint\n\n",
        "context": {
          "type": "mixin",
          "name": "mq-add-breakpoint",
          "code": "\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n",
          "line": {
            "start": 302,
            "end": 306
          }
        }
      }
    ]
  },
  {
    "description": "Add a breakpoint\n\n",
    "commentRange": {
      "start": 292,
      "end": 301
    },
    "context": {
      "type": "mixin",
      "name": "mq-add-breakpoint",
      "code": "\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n",
      "line": {
        "start": 302,
        "end": 306
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of the breakpoint"
      },
      {
        "type": "Number",
        "name": "width",
        "description": "Width of the breakpoint\n"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_mq-map-sort-by-value"
      },
      {
        "type": "variable",
        "name": "mq-breakpoints",
        "external": false
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include mq-add-breakpoint(tvscreen, 1920px);\n@include mq(tvscreen) {}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    }
  },
  {
    "description": "Show the active breakpoint in the top right corner of the viewport\n",
    "commentRange": {
      "start": 308,
      "end": 322
    },
    "context": {
      "type": "mixin",
      "name": "mq-show-breakpoints",
      "code": "\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n",
      "line": {
        "start": 323,
        "end": 345
      }
    },
    "link": [
      {
        "url": "https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint",
        "caption": ""
      }
    ],
    "parameter": [
      {
        "type": "List",
        "name": "show-breakpoints",
        "description": "($mq-show-breakpoints) - List of breakpoints to show in the top right corner"
      },
      {
        "type": "Map",
        "name": "breakpoints",
        "description": "($mq-breakpoints) - Breakpoint names and sizes\n"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "mq"
      },
      {
        "type": "function",
        "name": "mq-get-breakpoint-width"
      },
      {
        "type": "function",
        "name": "mq-px2em"
      },
      {
        "type": "variable",
        "name": "mq-breakpoints",
        "external": false
      },
      {
        "type": "variable",
        "name": "mq-show-breakpoints",
        "external": false
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "// Show breakpoints using global settings\n@include mq-show-breakpoints;\n\n// Show breakpoints using custom settings\n@include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "vendor/_sass-mq.scss",
      "name": "_sass-mq.scss"
    }
  }
]
